
A2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800200  00000384  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800266  00800266  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b1  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9b  00000000  00000000  000015f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b7  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000274c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036d  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
   2:	00 00       	nop
   4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
   6:	00 00       	nop
   8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
  12:	00 00       	nop
  14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
  22:	00 00       	nop
  24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
  26:	00 00       	nop
  28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	84 c0       	rjmp	.+264    	; 0x136 <__bad_interrupt>
  2e:	00 00       	nop
  30:	82 c0       	rjmp	.+260    	; 0x136 <__bad_interrupt>
  32:	00 00       	nop
  34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
  36:	00 00       	nop
  38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
  46:	00 00       	nop
  48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
  4e:	00 00       	nop
  50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
  52:	00 00       	nop
  54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
  56:	00 00       	nop
  58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
  62:	00 00       	nop
  64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
  66:	00 00       	nop
  68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
  72:	00 00       	nop
  74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
  76:	00 00       	nop
  78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
  82:	00 00       	nop
  84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
  86:	00 00       	nop
  88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
  8e:	00 00       	nop
  90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
  92:	00 00       	nop
  94:	50 c0       	rjmp	.+160    	; 0x136 <__bad_interrupt>
  96:	00 00       	nop
  98:	4e c0       	rjmp	.+156    	; 0x136 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4c c0       	rjmp	.+152    	; 0x136 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4a c0       	rjmp	.+148    	; 0x136 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	48 c0       	rjmp	.+144    	; 0x136 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	46 c0       	rjmp	.+140    	; 0x136 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	44 c0       	rjmp	.+136    	; 0x136 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	42 c0       	rjmp	.+132    	; 0x136 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	40 c0       	rjmp	.+128    	; 0x136 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3e c0       	rjmp	.+124    	; 0x136 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3c c0       	rjmp	.+120    	; 0x136 <__bad_interrupt>
  be:	00 00       	nop
  c0:	3a c0       	rjmp	.+116    	; 0x136 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	38 c0       	rjmp	.+112    	; 0x136 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	36 c0       	rjmp	.+108    	; 0x136 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	34 c0       	rjmp	.+104    	; 0x136 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	32 c0       	rjmp	.+100    	; 0x136 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	30 c0       	rjmp	.+96     	; 0x136 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2e c0       	rjmp	.+92     	; 0x136 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2c c0       	rjmp	.+88     	; 0x136 <__bad_interrupt>
  de:	00 00       	nop
  e0:	2a c0       	rjmp	.+84     	; 0x136 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ac 00       	.word	0x00ac	; ????
  e6:	b3 00       	.word	0x00b3	; ????
  e8:	ba 00       	.word	0x00ba	; ????
  ea:	c1 00       	.word	0x00c1	; ????
  ec:	c8 00       	.word	0x00c8	; ????
  ee:	cf 00       	.word	0x00cf	; ????
  f0:	d6 00       	.word	0x00d6	; ????
  f2:	dd 00       	.word	0x00dd	; ????
  f4:	e4 00       	.word	0x00e4	; ????
  f6:	eb 00       	.word	0x00eb	; ????

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d1 e2       	ldi	r29, 0x21	; 33
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
 108:	12 e0       	ldi	r17, 0x02	; 2
 10a:	a0 e0       	ldi	r26, 0x00	; 0
 10c:	b2 e0       	ldi	r27, 0x02	; 2
 10e:	e4 e8       	ldi	r30, 0x84	; 132
 110:	f3 e0       	ldi	r31, 0x03	; 3
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	0b bf       	out	0x3b, r16	; 59
 116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
 118:	07 90       	elpm	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	a6 36       	cpi	r26, 0x66	; 102
 11e:	b1 07       	cpc	r27, r17
 120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
 122:	22 e0       	ldi	r18, 0x02	; 2
 124:	a6 e6       	ldi	r26, 0x66	; 102
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
 12c:	a4 37       	cpi	r26, 0x74	; 116
 12e:	b2 07       	cpc	r27, r18
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	bf d0       	rcall	.+382    	; 0x2b2 <main>
 134:	25 c1       	rjmp	.+586    	; 0x380 <_exit>

00000136 <__bad_interrupt>:
 136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <initialize>:
uint8_t read_raw(DigiPort_t* port, uint8_t maske);
uint8_t read_busy_wait(DigiPort_t* port, uint8_t maske);


// Prozeduren BITTE NICHT BENUTZEN ( NICHT AKTUELL AKTUALISIERT )
void initialize(DigiPort_t* port, uint8_t port_nummer, uint8_t mode){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
		switch(port_nummer){
 13e:	86 2f       	mov	r24, r22
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	ea 30       	cpi	r30, 0x0A	; 10
 148:	f1 05       	cpc	r31, r1
 14a:	08 f0       	brcs	.+2      	; 0x14e <initialize+0x16>
 14c:	4a c0       	rjmp	.+148    	; 0x1e2 <initialize+0xaa>
 14e:	88 27       	eor	r24, r24
 150:	ee 58       	subi	r30, 0x8E	; 142
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	8f 4f       	sbci	r24, 0xFF	; 255
 156:	dc c0       	rjmp	.+440    	; 0x310 <__tablejump2__>
			case PA:
			port->portreg = &DDRA;		// portreg pointed to address ddra		
 158:	81 e2       	ldi	r24, 0x21	; 33
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	99 83       	std	Y+1, r25	; 0x01
 15e:	88 83       	st	Y, r24
			port->status = PA;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	8b 83       	std	Y+3, r24	; 0x03
			break;
 164:	3e c0       	rjmp	.+124    	; 0x1e2 <initialize+0xaa>
			
			case PB:
			port->portreg = &DDRB;
 166:	84 e2       	ldi	r24, 0x24	; 36
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	99 83       	std	Y+1, r25	; 0x01
 16c:	88 83       	st	Y, r24
			port->status = PB;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	8b 83       	std	Y+3, r24	; 0x03
			break;
 172:	37 c0       	rjmp	.+110    	; 0x1e2 <initialize+0xaa>
			
			case PC:
			port->portreg = &DDRC;
 174:	87 e2       	ldi	r24, 0x27	; 39
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	99 83       	std	Y+1, r25	; 0x01
 17a:	88 83       	st	Y, r24
			port->status = PC;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	8b 83       	std	Y+3, r24	; 0x03
			break;
 180:	30 c0       	rjmp	.+96     	; 0x1e2 <initialize+0xaa>
			
			case PD:
			port->portreg = &DDRD;
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	99 83       	std	Y+1, r25	; 0x01
 188:	88 83       	st	Y, r24
			port->status = PD;
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	8b 83       	std	Y+3, r24	; 0x03
			break;
 18e:	29 c0       	rjmp	.+82     	; 0x1e2 <initialize+0xaa>
			
			case PE:
			port->portreg = &DDRE;
 190:	8d e2       	ldi	r24, 0x2D	; 45
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	99 83       	std	Y+1, r25	; 0x01
 196:	88 83       	st	Y, r24
			port->status = PE;
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	8b 83       	std	Y+3, r24	; 0x03
			break;
 19c:	22 c0       	rjmp	.+68     	; 0x1e2 <initialize+0xaa>
			
			case PF:
			port->portreg = &DDRF;
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	99 83       	std	Y+1, r25	; 0x01
 1a4:	88 83       	st	Y, r24
			port->status = PF;
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	8b 83       	std	Y+3, r24	; 0x03
			break;
 1aa:	1b c0       	rjmp	.+54     	; 0x1e2 <initialize+0xaa>
			
			case PG:
			port->portreg = &DDRG;
 1ac:	83 e3       	ldi	r24, 0x33	; 51
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	99 83       	std	Y+1, r25	; 0x01
 1b2:	88 83       	st	Y, r24
			port->status = PG;
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	8b 83       	std	Y+3, r24	; 0x03
			break;
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <initialize+0xaa>
			
			case PH:
			port->portreg = &DDRH;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	99 83       	std	Y+1, r25	; 0x01
 1c0:	88 83       	st	Y, r24
			port->status = PH;
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	8b 83       	std	Y+3, r24	; 0x03
			break;
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <initialize+0xaa>
			
			case PJ:
			port->portreg = &DDRJ;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	99 83       	std	Y+1, r25	; 0x01
 1ce:	88 83       	st	Y, r24
			port->status = PJ;
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	8b 83       	std	Y+3, r24	; 0x03
			break;
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <initialize+0xaa>
			
			case PK:
			port->portreg = &DDRK;
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	99 83       	std	Y+1, r25	; 0x01
 1dc:	88 83       	st	Y, r24
			port->status = PK;
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		*port->portreg = mode;  //
 1e2:	e8 81       	ld	r30, Y
 1e4:	f9 81       	ldd	r31, Y+1	; 0x01
 1e6:	40 83       	st	Z, r20
		port->mode = mode; //
 1e8:	4a 83       	std	Y+2, r20	; 0x02
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <write>:

void write(DigiPort_t* port, uint8_t bits){
	if(port->mode==SET_OUT_PORT){
 1f0:	dc 01       	movw	r26, r24
 1f2:	12 96       	adiw	r26, 0x02	; 2
 1f4:	2c 91       	ld	r18, X
 1f6:	12 97       	sbiw	r26, 0x02	; 2
 1f8:	2f 3f       	cpi	r18, 0xFF	; 255
 1fa:	21 f4       	brne	.+8      	; 0x204 <write+0x14>
		*((port->portreg)+1)=bits;	// active high
 1fc:	ed 91       	ld	r30, X+
 1fe:	fc 91       	ld	r31, X
 200:	61 83       	std	Z+1, r22	; 0x01
 202:	08 95       	ret
		// *((port->portreg)+1) = ~(uint8_t)(bits);	// active low
	}
	else{
		printf("FAILED: This port is for writing, please use input() \n");
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	8b c0       	rjmp	.+278    	; 0x320 <puts>
 20a:	08 95       	ret

0000020c <toggle>:
	}
}

void toggle(DigiPort_t* port, uint8_t bits){
	if(bits == (uint8_t)(0x00)){		//set default value
 20c:	61 11       	cpse	r22, r1
 20e:	01 c0       	rjmp	.+2      	; 0x212 <toggle+0x6>
		bits = (uint8_t)(0xFF);
 210:	6f ef       	ldi	r22, 0xFF	; 255
	}
	
	if(port->mode==SET_OUT_PORT){
 212:	dc 01       	movw	r26, r24
 214:	12 96       	adiw	r26, 0x02	; 2
 216:	2c 91       	ld	r18, X
 218:	12 97       	sbiw	r26, 0x02	; 2
 21a:	2f 3f       	cpi	r18, 0xFF	; 255
 21c:	31 f4       	brne	.+12     	; 0x22a <toggle+0x1e>
		*((port->portreg)+1) ^= (uint8_t)(bits); // xor
 21e:	ed 91       	ld	r30, X+
 220:	fc 91       	ld	r31, X
 222:	81 81       	ldd	r24, Z+1	; 0x01
 224:	68 27       	eor	r22, r24
 226:	61 83       	std	Z+1, r22	; 0x01
 228:	08 95       	ret
	}
	
	else{
		printf("FAILED: This port is for normally for output! \n");
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	78 c0       	rjmp	.+240    	; 0x320 <puts>
 230:	08 95       	ret

00000232 <on>:
	}
}

void on(DigiPort_t* port, uint8_t bits){
	if(port->mode==SET_OUT_PORT){
 232:	dc 01       	movw	r26, r24
 234:	12 96       	adiw	r26, 0x02	; 2
 236:	2c 91       	ld	r18, X
 238:	12 97       	sbiw	r26, 0x02	; 2
 23a:	2f 3f       	cpi	r18, 0xFF	; 255
 23c:	31 f4       	brne	.+12     	; 0x24a <on+0x18>
		//*((port->portreg)+1) &= ~(uint8_t)(bits); //active low
		*((port->portreg)+1) |= (uint8_t)(bits);  //active high
 23e:	ed 91       	ld	r30, X+
 240:	fc 91       	ld	r31, X
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	68 2b       	or	r22, r24
 246:	61 83       	std	Z+1, r22	; 0x01
 248:	08 95       	ret
	}
	else{
		printf("FAILED: This port is for normally for output! \n");
 24a:	86 e3       	ldi	r24, 0x36	; 54
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	68 c0       	rjmp	.+208    	; 0x320 <puts>
 250:	08 95       	ret

00000252 <off>:
	}
}

void off(DigiPort_t* port, uint8_t bits){
	if(port->mode==SET_OUT_PORT){
 252:	dc 01       	movw	r26, r24
 254:	12 96       	adiw	r26, 0x02	; 2
 256:	2c 91       	ld	r18, X
 258:	12 97       	sbiw	r26, 0x02	; 2
 25a:	2f 3f       	cpi	r18, 0xFF	; 255
 25c:	39 f4       	brne	.+14     	; 0x26c <off+0x1a>
		//*((port->portreg)+1) |= (uint8_t)(bits); // active low
		*((port->portreg)+1) &= ~(uint8_t)(bits); //active high
 25e:	ed 91       	ld	r30, X+
 260:	fc 91       	ld	r31, X
 262:	81 81       	ldd	r24, Z+1	; 0x01
 264:	60 95       	com	r22
 266:	68 23       	and	r22, r24
 268:	61 83       	std	Z+1, r22	; 0x01
 26a:	08 95       	ret
	}
	else{
		printf("FAILED: This port is for normally for output! \n");
 26c:	86 e3       	ldi	r24, 0x36	; 54
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	57 c0       	rjmp	.+174    	; 0x320 <puts>
 272:	08 95       	ret

00000274 <read_raw>:
	}
}

uint8_t read_raw(DigiPort_t* port, uint8_t maske){
	if(maske== (uint8_t)(0x00)){	// default value 
 274:	61 11       	cpse	r22, r1
 276:	01 c0       	rjmp	.+2      	; 0x27a <read_raw+0x6>
		maske= (uint8_t)(0xFF);
 278:	6f ef       	ldi	r22, 0xFF	; 255
	}
	return *((port->portreg)-1) &= (uint8_t)(maske); // active high
 27a:	dc 01       	movw	r26, r24
 27c:	ed 91       	ld	r30, X+
 27e:	fc 91       	ld	r31, X
 280:	82 91       	ld	r24, -Z
 282:	86 23       	and	r24, r22
 284:	80 83       	st	Z, r24
	//return *((port->portreg)-1) |= ~(uint8_t)(maske); // active low
}
 286:	08 95       	ret

00000288 <read_busy_wait>:

uint8_t read_busy_wait(DigiPort_t* port, uint8_t maske){
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	16 2f       	mov	r17, r22
	uint8_t temp = read_raw(port, maske);
 294:	ef df       	rcall	.-34     	; 0x274 <read_raw>
 296:	08 2f       	mov	r16, r24
	do{
		//_delay_ms(100);
	} while(read_raw(port, maske)==temp);
 298:	61 2f       	mov	r22, r17
 29a:	ce 01       	movw	r24, r28
 29c:	eb df       	rcall	.-42     	; 0x274 <read_raw>
 29e:	08 17       	cp	r16, r24
 2a0:	d9 f3       	breq	.-10     	; 0x298 <read_busy_wait+0x10>
	
	return read_raw(port, maske);
 2a2:	61 2f       	mov	r22, r17
 2a4:	ce 01       	movw	r24, r28
 2a6:	e6 df       	rcall	.-52     	; 0x274 <read_raw>
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <main>:

DigiPort_t ledport;
DigiPort_t swport;
int main(void)
{
	initialize (&ledport, PA, SET_OUT_PORT);
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	86 e6       	ldi	r24, 0x66	; 102
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	3e df       	rcall	.-388    	; 0x138 <initialize>
	initialize (&swport, PK, SET_IN_PORT);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	8a e6       	ldi	r24, 0x6A	; 106
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	39 df       	rcall	.-398    	; 0x138 <initialize>
	write (&ledport, 0xAA);
 2c6:	6a ea       	ldi	r22, 0xAA	; 170
 2c8:	86 e6       	ldi	r24, 0x66	; 102
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	91 df       	rcall	.-222    	; 0x1f0 <write>
	//_delay_ms(500);
	off (&ledport, 0x0F);
 2ce:	6f e0       	ldi	r22, 0x0F	; 15
 2d0:	86 e6       	ldi	r24, 0x66	; 102
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	be df       	rcall	.-132    	; 0x252 <off>
	//_delay_ms(500);
	on (&ledport, 0xF0);
 2d6:	60 ef       	ldi	r22, 0xF0	; 240
 2d8:	86 e6       	ldi	r24, 0x66	; 102
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	aa df       	rcall	.-172    	; 0x232 <on>
	//_delay_ms(500);
	toggle (&ledport, 0x3C);
 2de:	6c e3       	ldi	r22, 0x3C	; 60
 2e0:	86 e6       	ldi	r24, 0x66	; 102
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	93 df       	rcall	.-218    	; 0x20c <toggle>
	//_delay_ms(500);
	toggle (&ledport, 0x3C);
 2e6:	6c e3       	ldi	r22, 0x3C	; 60
 2e8:	86 e6       	ldi	r24, 0x66	; 102
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	8f df       	rcall	.-226    	; 0x20c <toggle>

	read_busy_wait(&swport, 0xFF);
 2ee:	6f ef       	ldi	r22, 0xFF	; 255
 2f0:	8a e6       	ldi	r24, 0x6A	; 106
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	c9 df       	rcall	.-110    	; 0x288 <read_busy_wait>
	off(&ledport, 0xFF);
 2f6:	6f ef       	ldi	r22, 0xFF	; 255
 2f8:	86 e6       	ldi	r24, 0x66	; 102
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	aa df       	rcall	.-172    	; 0x252 <off>
	do {
		write (&ledport, read_raw(&swport,0xFF));
 2fe:	6f ef       	ldi	r22, 0xFF	; 255
 300:	8a e6       	ldi	r24, 0x6A	; 106
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	b7 df       	rcall	.-146    	; 0x274 <read_raw>
 306:	68 2f       	mov	r22, r24
 308:	86 e6       	ldi	r24, 0x66	; 102
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	71 df       	rcall	.-286    	; 0x1f0 <write>
 30e:	f7 cf       	rjmp	.-18     	; 0x2fe <main+0x4c>

00000310 <__tablejump2__>:
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	88 1f       	adc	r24, r24
 316:	8b bf       	out	0x3b, r24	; 59
 318:	07 90       	elpm	r0, Z+
 31a:	f6 91       	elpm	r31, Z
 31c:	e0 2d       	mov	r30, r0
 31e:	19 94       	eijmp

00000320 <puts>:
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__iob+0x2>
 32c:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <__iob+0x3>
 330:	23 81       	ldd	r18, Z+3	; 0x03
 332:	21 ff       	sbrs	r18, 1
 334:	1b c0       	rjmp	.+54     	; 0x36c <puts+0x4c>
 336:	8c 01       	movw	r16, r24
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	f8 01       	movw	r30, r16
 33e:	81 91       	ld	r24, Z+
 340:	8f 01       	movw	r16, r30
 342:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <__iob+0x2>
 346:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <__iob+0x3>
 34a:	db 01       	movw	r26, r22
 34c:	18 96       	adiw	r26, 0x08	; 8
 34e:	ed 91       	ld	r30, X+
 350:	fc 91       	ld	r31, X
 352:	19 97       	sbiw	r26, 0x09	; 9
 354:	88 23       	and	r24, r24
 356:	31 f0       	breq	.+12     	; 0x364 <puts+0x44>
 358:	19 95       	eicall
 35a:	89 2b       	or	r24, r25
 35c:	79 f3       	breq	.-34     	; 0x33c <puts+0x1c>
 35e:	df ef       	ldi	r29, 0xFF	; 255
 360:	cf ef       	ldi	r28, 0xFF	; 255
 362:	ec cf       	rjmp	.-40     	; 0x33c <puts+0x1c>
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	19 95       	eicall
 368:	89 2b       	or	r24, r25
 36a:	19 f0       	breq	.+6      	; 0x372 <puts+0x52>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	02 c0       	rjmp	.+4      	; 0x376 <puts+0x56>
 372:	8d 2f       	mov	r24, r29
 374:	9c 2f       	mov	r25, r28
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
