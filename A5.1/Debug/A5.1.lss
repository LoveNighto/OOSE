
A5.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800200  0000257c  00002610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001a13  008002da  008002da  000026ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008281  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002733  00000000  00000000  0000ae8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ad1  00000000  00000000  0000d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001300  00000000  00000000  00011094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002160  00000000  00000000  00012394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000574b  00000000  00000000  000144f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00019c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	73 c0       	rjmp	.+230    	; 0xe8 <_ZL7wdt_offv>
       2:	00 00       	nop
       4:	01 c1       	rjmp	.+514    	; 0x208 <__bad_interrupt>
       6:	00 00       	nop
       8:	ff c0       	rjmp	.+510    	; 0x208 <__bad_interrupt>
       a:	00 00       	nop
       c:	fd c0       	rjmp	.+506    	; 0x208 <__bad_interrupt>
       e:	00 00       	nop
      10:	fb c0       	rjmp	.+502    	; 0x208 <__bad_interrupt>
      12:	00 00       	nop
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__bad_interrupt>
      16:	00 00       	nop
      18:	f7 c0       	rjmp	.+494    	; 0x208 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f3 c0       	rjmp	.+486    	; 0x208 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c5       	rjmp	.+2748   	; 0xae2 <__vector_9>
      26:	00 00       	nop
      28:	8f c5       	rjmp	.+2846   	; 0xb48 <__vector_10>
      2a:	00 00       	nop
      2c:	c0 c5       	rjmp	.+2944   	; 0xbae <__vector_11>
      2e:	00 00       	nop
      30:	eb c0       	rjmp	.+470    	; 0x208 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_13>
      38:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__vector_14>
      3c:	e5 c0       	rjmp	.+458    	; 0x208 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e3 c0       	rjmp	.+454    	; 0x208 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__vector_17>
      48:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_18>
      4c:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__vector_19>
      50:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_20>
      54:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_21>
      58:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_22>
      5c:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_23>
      60:	d3 c0       	rjmp	.+422    	; 0x208 <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__bad_interrupt>
      66:	00 00       	nop
      68:	cf c0       	rjmp	.+414    	; 0x208 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cd c0       	rjmp	.+410    	; 0x208 <__bad_interrupt>
      6e:	00 00       	nop
      70:	cb c0       	rjmp	.+406    	; 0x208 <__bad_interrupt>
      72:	00 00       	nop
      74:	c9 c0       	rjmp	.+402    	; 0x208 <__bad_interrupt>
      76:	00 00       	nop
      78:	c7 c0       	rjmp	.+398    	; 0x208 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c5 c0       	rjmp	.+394    	; 0x208 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_32>
      84:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_33>
      88:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_34>
      8c:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_35>
      90:	bb c0       	rjmp	.+374    	; 0x208 <__bad_interrupt>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__bad_interrupt>
      96:	00 00       	nop
      98:	b7 c0       	rjmp	.+366    	; 0x208 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b5 c0       	rjmp	.+362    	; 0x208 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b3 c0       	rjmp	.+358    	; 0x208 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b1 c0       	rjmp	.+354    	; 0x208 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_42>
      ac:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_43>
      b0:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__vector_44>
      b4:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_45>
      b8:	a7 c0       	rjmp	.+334    	; 0x208 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_47>
      c0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_48>
      c4:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_49>
      c8:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__vector_50>
      cc:	9d c0       	rjmp	.+314    	; 0x208 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	9b c0       	rjmp	.+310    	; 0x208 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	99 c0       	rjmp	.+306    	; 0x208 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	97 c0       	rjmp	.+302    	; 0x208 <__bad_interrupt>
      da:	00 00       	nop
      dc:	95 c0       	rjmp	.+298    	; 0x208 <__bad_interrupt>
      de:	00 00       	nop
      e0:	93 c0       	rjmp	.+294    	; 0x208 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	30 04       	cpc	r3, r0
      e6:	bf 0a       	sbc	r11, r31

000000e8 <_ZL7wdt_offv>:
// ausgeschaltet werden, sonst ensteht eine endlose RESET-Schleife. 
// Zu diesem Zweck wird der Aufruf von wdt_off() in die frueheste init-Sektion
// eingebaut - dieser Code wird unmittelbar nach RESET ausgefuehrt.

static void wdt_off (void) __attribute__((section(".init0"),naked, used));
static void wdt_off (void) {MCUSR = 0; wdt_disable();}
      e8:	14 be       	out	0x34, r1	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	f8 94       	cli
      ee:	a8 95       	wdr
      f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
      f4:	88 61       	ori	r24, 0x18	; 24
      f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
      fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
      fe:	0f be       	out	0x3f, r0	; 63

00000100 <_ZL7wdt_offv>:
     100:	14 be       	out	0x34, r1	; 52
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	a8 95       	wdr
     108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     10c:	88 61       	ori	r24, 0x18	; 24
     10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     116:	0f be       	out	0x3f, r0	; 63

00000118 <_ZL7wdt_offv>:
     118:	14 be       	out	0x34, r1	; 52
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	a8 95       	wdr
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     124:	88 61       	ori	r24, 0x18	; 24
     126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     12e:	0f be       	out	0x3f, r0	; 63

00000130 <_ZL7wdt_offv>:
     130:	14 be       	out	0x34, r1	; 52
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	a8 95       	wdr
     138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     13c:	88 61       	ori	r24, 0x18	; 24
     13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     146:	0f be       	out	0x3f, r0	; 63

00000148 <_ZL7wdt_offv>:
     148:	14 be       	out	0x34, r1	; 52
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	a8 95       	wdr
     150:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     154:	88 61       	ori	r24, 0x18	; 24
     156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     15a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     15e:	0f be       	out	0x3f, r0	; 63

00000160 <_ZL7wdt_offv>:
     160:	14 be       	out	0x34, r1	; 52
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	a8 95       	wdr
     168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     16c:	88 61       	ori	r24, 0x18	; 24
     16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     172:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     176:	0f be       	out	0x3f, r0	; 63

00000178 <_ZL7wdt_offv>:
     178:	14 be       	out	0x34, r1	; 52
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	a8 95       	wdr
     180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     184:	88 61       	ori	r24, 0x18	; 24
     186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     18a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     18e:	0f be       	out	0x3f, r0	; 63

00000190 <_ZL7wdt_offv>:
     190:	14 be       	out	0x34, r1	; 52
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	a8 95       	wdr
     198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     19c:	88 61       	ori	r24, 0x18	; 24
     19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     1a2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d1 e2       	ldi	r29, 0x21	; 33
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0c bf       	out	0x3c, r16	; 60

000001b8 <__do_copy_data>:
     1b8:	12 e0       	ldi	r17, 0x02	; 2
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b2 e0       	ldi	r27, 0x02	; 2
     1be:	ec e7       	ldi	r30, 0x7C	; 124
     1c0:	f5 e2       	ldi	r31, 0x25	; 37
     1c2:	00 e0       	ldi	r16, 0x00	; 0
     1c4:	0b bf       	out	0x3b, r16	; 59
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x14>
     1c8:	07 90       	elpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	aa 3d       	cpi	r26, 0xDA	; 218
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0x10>

000001d2 <__do_clear_bss>:
     1d2:	2c e1       	ldi	r18, 0x1C	; 28
     1d4:	aa ed       	ldi	r26, 0xDA	; 218
     1d6:	b2 e0       	ldi	r27, 0x02	; 2
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	ad 3e       	cpi	r26, 0xED	; 237
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>

000001e2 <__do_global_ctors>:
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	c4 e7       	ldi	r28, 0x74	; 116
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	00 e0       	ldi	r16, 0x00	; 0
     1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <__do_global_ctors+0x16>
     1ec:	21 97       	sbiw	r28, 0x01	; 1
     1ee:	01 09       	sbc	r16, r1
     1f0:	80 2f       	mov	r24, r16
     1f2:	fe 01       	movw	r30, r28
     1f4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__tablejump2__>
     1f8:	c2 37       	cpi	r28, 0x72	; 114
     1fa:	d1 07       	cpc	r29, r17
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	08 07       	cpc	r16, r24
     200:	a9 f7       	brne	.-22     	; 0x1ec <__do_global_ctors+0xa>
     202:	e5 d2       	rcall	.+1482   	; 0x7ce <main>
     204:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <_exit>

00000208 <__bad_interrupt>:
     208:	fb ce       	rjmp	.-522    	; 0x0 <__vectors>

0000020a <_Z7blinkerv>:


//================================================================================================
// Tasks und Prozeduren
void blinker(void){			// Separate Blink and IRQ //WORKING
	if(led_1.status == ON){
     20a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <led_1>
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	f9 f4       	brne	.+62     	; 0x250 <_Z7blinkerv+0x46>
		led_1.current_delay--;
     212:	e5 e6       	ldi	r30, 0x65	; 101
     214:	f3 e0       	ldi	r31, 0x03	; 3
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	81 50       	subi	r24, 0x01	; 1
     21a:	81 83       	std	Z+1, r24	; 0x01
		if (0 == led_1.current_delay){
     21c:	81 11       	cpse	r24, r1
     21e:	18 c0       	rjmp	.+48     	; 0x250 <_Z7blinkerv+0x46>
    /*! \brief Invertiere die durch bits spezifizierten Bits des Ports.
		\param [in] bits Bitmuster in active-high Logik. Default 0xFF. Bitpositionen, die
		            beim Port zur Eingabe konfiguriert sind, werden dabei ignoriert.
	*/
	virtual inline void toggle (uint8_t bits=0xFF) {
		CRITICAL_SECTION { 
     220:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     222:	f8 94       	cli
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	88 23       	and	r24, r24
     228:	71 f0       	breq	.+28     	; 0x246 <_Z7blinkerv+0x3c>
			*(base + OUT_OFFSET) ^= (uint8_t)(OUT_MASK & bits);
     22a:	a6 e5       	ldi	r26, 0x56	; 86
     22c:	b3 e0       	ldi	r27, 0x03	; 3
     22e:	12 96       	adiw	r26, 0x02	; 2
     230:	ed 91       	ld	r30, X+
     232:	fc 91       	ld	r31, X
     234:	13 97       	sbiw	r26, 0x03	; 3
     236:	92 81       	ldd	r25, Z+2	; 0x02
     238:	14 96       	adiw	r26, 0x04	; 4
     23a:	8c 91       	ld	r24, X
     23c:	8f 70       	andi	r24, 0x0F	; 15
     23e:	89 27       	eor	r24, r25
     240:	82 83       	std	Z+2, r24	; 0x02
    /*! \brief Invertiere die durch bits spezifizierten Bits des Ports.
		\param [in] bits Bitmuster in active-high Logik. Default 0xFF. Bitpositionen, die
		            beim Port zur Eingabe konfiguriert sind, werden dabei ignoriert.
	*/
	virtual inline void toggle (uint8_t bits=0xFF) {
		CRITICAL_SECTION { 
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	f0 cf       	rjmp	.-32     	; 0x226 <_Z7blinkerv+0x1c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     246:	2f bf       	out	0x3f, r18	; 63
			blinker_1();
			led_1.current_delay = led_1.request_delay; // repeat blink
     248:	e5 e6       	ldi	r30, 0x65	; 101
     24a:	f3 e0       	ldi	r31, 0x03	; 3
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	if(led_2.status == ON){
     250:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <led_2>
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	f9 f4       	brne	.+62     	; 0x296 <_Z7blinkerv+0x8c>
		led_2.current_delay--;
     258:	e2 e6       	ldi	r30, 0x62	; 98
     25a:	f3 e0       	ldi	r31, 0x03	; 3
     25c:	81 81       	ldd	r24, Z+1	; 0x01
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	81 83       	std	Z+1, r24	; 0x01
		if (0 == led_2.current_delay){
     262:	81 11       	cpse	r24, r1
     264:	18 c0       	rjmp	.+48     	; 0x296 <_Z7blinkerv+0x8c>
     266:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     268:	f8 94       	cli
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	88 23       	and	r24, r24
     26e:	71 f0       	breq	.+28     	; 0x28c <_Z7blinkerv+0x82>
			*(base + OUT_OFFSET) ^= (uint8_t)(OUT_MASK & bits);
     270:	a6 e5       	ldi	r26, 0x56	; 86
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	12 96       	adiw	r26, 0x02	; 2
     276:	ed 91       	ld	r30, X+
     278:	fc 91       	ld	r31, X
     27a:	13 97       	sbiw	r26, 0x03	; 3
     27c:	92 81       	ldd	r25, Z+2	; 0x02
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	8c 91       	ld	r24, X
     282:	80 7f       	andi	r24, 0xF0	; 240
     284:	89 27       	eor	r24, r25
     286:	82 83       	std	Z+2, r24	; 0x02
    /*! \brief Invertiere die durch bits spezifizierten Bits des Ports.
		\param [in] bits Bitmuster in active-high Logik. Default 0xFF. Bitpositionen, die
		            beim Port zur Eingabe konfiguriert sind, werden dabei ignoriert.
	*/
	virtual inline void toggle (uint8_t bits=0xFF) {
		CRITICAL_SECTION { 
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	f0 cf       	rjmp	.-32     	; 0x26c <_Z7blinkerv+0x62>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     28c:	2f bf       	out	0x3f, r18	; 63
			blinker_2();
			led_2.current_delay = led_2.request_delay; 
     28e:	e2 e6       	ldi	r30, 0x62	; 98
     290:	f3 e0       	ldi	r31, 0x03	; 3
     292:	82 81       	ldd	r24, Z+2	; 0x02
     294:	81 83       	std	Z+1, r24	; 0x01
     296:	08 95       	ret

00000298 <_Z6Task_1v>:
			display_row_position = disp_row_pos;
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
     298:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <myTask1+0x1>
	}
}

void Task_1(){
	while(1){
		if(myTask1.getStatus() == ON){
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	e1 f7       	brne	.-8      	; 0x298 <_Z6Task_1v>
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
     2a0:	c1 e1       	ldi	r28, 0x11	; 17
     2a2:	d3 e0       	ldi	r29, 0x03	; 3
}

void Task_1(){
	while(1){
		if(myTask1.getStatus() == ON){
			myTask1.getSemaphor()->wait_aquire();
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	9b 81       	ldd	r25, Y+3	; 0x03
     2a8:	e1 d2       	rcall	.+1474   	; 0x86c <_ZN14BinarySemaphor11wait_aquireEv>
			myTask1.getQueue()->clear();
     2aa:	8c 81       	ldd	r24, Y+4	; 0x04
     2ac:	9d 81       	ldd	r25, Y+5	; 0x05
     2ae:	11 d3       	rcall	.+1570   	; 0x8d2 <_ZN12BoundedQueue5clearEv>
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
     2b0:	a1 e1       	ldi	r26, 0x11	; 17
     2b2:	b3 e0       	ldi	r27, 0x03	; 3
     2b4:	18 96       	adiw	r26, 0x08	; 8
     2b6:	ed 91       	ld	r30, X+
     2b8:	fc 91       	ld	r31, X
     2ba:	19 97       	sbiw	r26, 0x09	; 9
		uint8_t getString_Index(void){return string_index;}
     2bc:	1a 96       	adiw	r26, 0x0a	; 10
     2be:	8c 91       	ld	r24, X
void Task_1(){
	while(1){
		if(myTask1.getStatus() == ON){
			myTask1.getSemaphor()->wait_aquire();
			myTask1.getQueue()->clear();
			while ('\0' != myTask1.getString()[myTask1.getString_Index()]){
     2c0:	e8 0f       	add	r30, r24
     2c2:	f1 1d       	adc	r31, r1
     2c4:	60 81       	ld	r22, Z
     2c6:	66 23       	and	r22, r22
     2c8:	a1 f0       	breq	.+40     	; 0x2f2 <_Z6Task_1v+0x5a>

				if(myTask1.getQueue()->write(myTask1.getString()[myTask1.getString_Index()]) == false){
     2ca:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <myTask1+0x4>
     2ce:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <myTask1+0x5>
     2d2:	1f d3       	rcall	.+1598   	; 0x912 <_ZN12BoundedQueue5writeEh>
     2d4:	81 11       	cpse	r24, r1
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <_Z6Task_1v+0x4e>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     2d8:	e1 e1       	ldi	r30, 0x11	; 17
     2da:	f3 e0       	ldi	r31, 0x03	; 3
			myTask1.getSemaphor()->wait_aquire();
			myTask1.getQueue()->clear();
			while ('\0' != myTask1.getString()[myTask1.getString_Index()]){

				if(myTask1.getQueue()->write(myTask1.getString()[myTask1.getString_Index()]) == false){
					myTask1.setString_Index(myTask1.getString_Index() - 1);
     2dc:	82 85       	ldd	r24, Z+10	; 0x0a
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     2de:	81 50       	subi	r24, 0x01	; 1
			myTask1.getQueue()->clear();
			while ('\0' != myTask1.getString()[myTask1.getString_Index()]){

				if(myTask1.getQueue()->write(myTask1.getString()[myTask1.getString_Index()]) == false){
					myTask1.setString_Index(myTask1.getString_Index() - 1);
					yield();
     2e0:	82 87       	std	Z+10, r24	; 0x0a
     2e2:	a2 d7       	rcall	.+3908   	; 0x1228 <_Z5yieldv>
     2e4:	e5 cf       	rjmp	.-54     	; 0x2b0 <_Z6Task_1v+0x18>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     2e6:	e1 e1       	ldi	r30, 0x11	; 17
     2e8:	f3 e0       	ldi	r31, 0x03	; 3
     2ea:	82 85       	ldd	r24, Z+10	; 0x0a
				if(myTask1.getQueue()->write(myTask1.getString()[myTask1.getString_Index()]) == false){
					myTask1.setString_Index(myTask1.getString_Index() - 1);
					yield();
				}
				else{
					myTask1.setString_Index(myTask1.getString_Index() + 1);
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     2ee:	82 87       	std	Z+10, r24	; 0x0a
     2f0:	df cf       	rjmp	.-66     	; 0x2b0 <_Z6Task_1v+0x18>
     2f2:	e1 e1       	ldi	r30, 0x11	; 17
     2f4:	f3 e0       	ldi	r31, 0x03	; 3
				else{
					myTask1.setString_Index(myTask1.getString_Index() + 1);
				}
			}
			myTask1.setString_Index(0);
			myTask1.getSemaphor()->release();
     2f6:	12 86       	std	Z+10, r1	; 0x0a
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	93 81       	ldd	r25, Z+3	; 0x03
			//myTask1.On_off();
			yield();
     2fc:	d3 d2       	rcall	.+1446   	; 0x8a4 <_ZN14BinarySemaphor7releaseEv>
     2fe:	94 d7       	rcall	.+3880   	; 0x1228 <_Z5yieldv>
     300:	cb cf       	rjmp	.-106    	; 0x298 <_Z6Task_1v>

00000302 <_Z6Task_2v>:
			display_row_position = disp_row_pos;
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
     302:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <myTask2+0x1>
	}
}

void Task_2(){
	while(1){
		if(myTask2.getStatus() == ON){
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	e1 f7       	brne	.-8      	; 0x302 <_Z6Task_2v>
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
     30a:	c6 e0       	ldi	r28, 0x06	; 6
     30c:	d3 e0       	ldi	r29, 0x03	; 3
}

void Task_2(){
	while(1){
		if(myTask2.getStatus() == ON){
			myTask2.getSemaphor()->wait_aquire();
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	9b 81       	ldd	r25, Y+3	; 0x03
     312:	ac d2       	rcall	.+1368   	; 0x86c <_ZN14BinarySemaphor11wait_aquireEv>
			myTask2.getQueue()->clear();
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	9d 81       	ldd	r25, Y+5	; 0x05
     318:	dc d2       	rcall	.+1464   	; 0x8d2 <_ZN12BoundedQueue5clearEv>
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
     31a:	a6 e0       	ldi	r26, 0x06	; 6
     31c:	b3 e0       	ldi	r27, 0x03	; 3
     31e:	18 96       	adiw	r26, 0x08	; 8
     320:	ed 91       	ld	r30, X+
     322:	fc 91       	ld	r31, X
     324:	19 97       	sbiw	r26, 0x09	; 9
		uint8_t getString_Index(void){return string_index;}
     326:	1a 96       	adiw	r26, 0x0a	; 10
     328:	8c 91       	ld	r24, X
void Task_2(){
	while(1){
		if(myTask2.getStatus() == ON){
			myTask2.getSemaphor()->wait_aquire();
			myTask2.getQueue()->clear();
			while ('\0' != myTask2.getString()[myTask2.getString_Index()]){
     32a:	e8 0f       	add	r30, r24
     32c:	f1 1d       	adc	r31, r1
     32e:	60 81       	ld	r22, Z
     330:	66 23       	and	r22, r22
     332:	a1 f0       	breq	.+40     	; 0x35c <_Z6Task_2v+0x5a>

				if(myTask2.getQueue()->write(myTask2.getString()[myTask2.getString_Index()]) == false){
     334:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <myTask2+0x4>
     338:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <myTask2+0x5>
     33c:	ea d2       	rcall	.+1492   	; 0x912 <_ZN12BoundedQueue5writeEh>
     33e:	81 11       	cpse	r24, r1
     340:	07 c0       	rjmp	.+14     	; 0x350 <_Z6Task_2v+0x4e>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     342:	e6 e0       	ldi	r30, 0x06	; 6
     344:	f3 e0       	ldi	r31, 0x03	; 3
			myTask2.getSemaphor()->wait_aquire();
			myTask2.getQueue()->clear();
			while ('\0' != myTask2.getString()[myTask2.getString_Index()]){

				if(myTask2.getQueue()->write(myTask2.getString()[myTask2.getString_Index()]) == false){
					myTask2.setString_Index(myTask2.getString_Index() - 1);
     346:	82 85       	ldd	r24, Z+10	; 0x0a
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     348:	81 50       	subi	r24, 0x01	; 1
			myTask2.getQueue()->clear();
			while ('\0' != myTask2.getString()[myTask2.getString_Index()]){

				if(myTask2.getQueue()->write(myTask2.getString()[myTask2.getString_Index()]) == false){
					myTask2.setString_Index(myTask2.getString_Index() - 1);
					yield();
     34a:	82 87       	std	Z+10, r24	; 0x0a
     34c:	6d d7       	rcall	.+3802   	; 0x1228 <_Z5yieldv>
     34e:	e5 cf       	rjmp	.-54     	; 0x31a <_Z6Task_2v+0x18>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     350:	e6 e0       	ldi	r30, 0x06	; 6
     352:	f3 e0       	ldi	r31, 0x03	; 3
     354:	82 85       	ldd	r24, Z+10	; 0x0a
				if(myTask2.getQueue()->write(myTask2.getString()[myTask2.getString_Index()]) == false){
					myTask2.setString_Index(myTask2.getString_Index() - 1);
					yield();
				}
				else{
					myTask2.setString_Index(myTask2.getString_Index() + 1);
     356:	8f 5f       	subi	r24, 0xFF	; 255
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     358:	82 87       	std	Z+10, r24	; 0x0a
     35a:	df cf       	rjmp	.-66     	; 0x31a <_Z6Task_2v+0x18>
     35c:	e6 e0       	ldi	r30, 0x06	; 6
     35e:	f3 e0       	ldi	r31, 0x03	; 3
				else{
					myTask2.setString_Index(myTask2.getString_Index() + 1);
				}
			}
			myTask2.setString_Index(0);
			myTask2.getSemaphor()->release();
     360:	12 86       	std	Z+10, r1	; 0x0a
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	93 81       	ldd	r25, Z+3	; 0x03
     366:	9e d2       	rcall	.+1340   	; 0x8a4 <_ZN14BinarySemaphor7releaseEv>
			//myTask2.On_off();
			yield();
     368:	5f d7       	rcall	.+3774   	; 0x1228 <_Z5yieldv>
     36a:	cb cf       	rjmp	.-106    	; 0x302 <_Z6Task_2v>

0000036c <_Z6Task_3v>:
     36c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <myTask3+0x1>
	}
}

void Task_3(){
	while(1){
		if(myTask3.getStatus() == ON){
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	e1 f7       	brne	.-8      	; 0x36c <_Z6Task_3v>
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
     374:	cb ef       	ldi	r28, 0xFB	; 251
     376:	d2 e0       	ldi	r29, 0x02	; 2
}

void Task_3(){
	while(1){
		if(myTask3.getStatus() == ON){
			myTask3.getSemaphor()->wait_aquire();
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	77 d2       	rcall	.+1262   	; 0x86c <_ZN14BinarySemaphor11wait_aquireEv>
			myTask3.getQueue()->clear();
     37e:	8c 81       	ldd	r24, Y+4	; 0x04
     380:	9d 81       	ldd	r25, Y+5	; 0x05
     382:	a7 d2       	rcall	.+1358   	; 0x8d2 <_ZN12BoundedQueue5clearEv>
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
     384:	ab ef       	ldi	r26, 0xFB	; 251
     386:	b2 e0       	ldi	r27, 0x02	; 2
     388:	18 96       	adiw	r26, 0x08	; 8
     38a:	ed 91       	ld	r30, X+
     38c:	fc 91       	ld	r31, X
     38e:	19 97       	sbiw	r26, 0x09	; 9
		uint8_t getString_Index(void){return string_index;}
     390:	1a 96       	adiw	r26, 0x0a	; 10
     392:	8c 91       	ld	r24, X
void Task_3(){
	while(1){
		if(myTask3.getStatus() == ON){
			myTask3.getSemaphor()->wait_aquire();
			myTask3.getQueue()->clear();
			while ('\0' != myTask3.getString()[myTask3.getString_Index()]){
     394:	e8 0f       	add	r30, r24
     396:	f1 1d       	adc	r31, r1
     398:	60 81       	ld	r22, Z
     39a:	66 23       	and	r22, r22
     39c:	a1 f0       	breq	.+40     	; 0x3c6 <_Z6Task_3v+0x5a>

				if(myTask3.getQueue()->write(myTask3.getString()[myTask3.getString_Index()]) == false){
     39e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <myTask3+0x4>
     3a2:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <myTask3+0x5>
     3a6:	b5 d2       	rcall	.+1386   	; 0x912 <_ZN12BoundedQueue5writeEh>
     3a8:	81 11       	cpse	r24, r1
     3aa:	07 c0       	rjmp	.+14     	; 0x3ba <_Z6Task_3v+0x4e>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     3ac:	eb ef       	ldi	r30, 0xFB	; 251
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
			myTask3.getSemaphor()->wait_aquire();
			myTask3.getQueue()->clear();
			while ('\0' != myTask3.getString()[myTask3.getString_Index()]){

				if(myTask3.getQueue()->write(myTask3.getString()[myTask3.getString_Index()]) == false){
					myTask3.setString_Index(myTask3.getString_Index() - 1);
     3b0:	82 85       	ldd	r24, Z+10	; 0x0a
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     3b2:	81 50       	subi	r24, 0x01	; 1
			myTask3.getQueue()->clear();
			while ('\0' != myTask3.getString()[myTask3.getString_Index()]){

				if(myTask3.getQueue()->write(myTask3.getString()[myTask3.getString_Index()]) == false){
					myTask3.setString_Index(myTask3.getString_Index() - 1);
					yield();
     3b4:	82 87       	std	Z+10, r24	; 0x0a
     3b6:	38 d7       	rcall	.+3696   	; 0x1228 <_Z5yieldv>
     3b8:	e5 cf       	rjmp	.-54     	; 0x384 <_Z6Task_3v+0x18>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     3ba:	eb ef       	ldi	r30, 0xFB	; 251
     3bc:	f2 e0       	ldi	r31, 0x02	; 2
     3be:	82 85       	ldd	r24, Z+10	; 0x0a
				if(myTask3.getQueue()->write(myTask3.getString()[myTask3.getString_Index()]) == false){
					myTask3.setString_Index(myTask3.getString_Index() - 1);
					yield();
				}
				else{
					myTask3.setString_Index(myTask3.getString_Index() + 1);
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     3c2:	82 87       	std	Z+10, r24	; 0x0a
     3c4:	df cf       	rjmp	.-66     	; 0x384 <_Z6Task_3v+0x18>
     3c6:	eb ef       	ldi	r30, 0xFB	; 251
     3c8:	f2 e0       	ldi	r31, 0x02	; 2
				else{
					myTask3.setString_Index(myTask3.getString_Index() + 1);
				}
			}
			myTask3.setString_Index(0);
			myTask3.getSemaphor()->release();
     3ca:	12 86       	std	Z+10, r1	; 0x0a
     3cc:	82 81       	ldd	r24, Z+2	; 0x02
     3ce:	93 81       	ldd	r25, Z+3	; 0x03
     3d0:	69 d2       	rcall	.+1234   	; 0x8a4 <_ZN14BinarySemaphor7releaseEv>
			//myTask3.On_off();
			yield();
     3d2:	2a d7       	rcall	.+3668   	; 0x1228 <_Z5yieldv>
     3d4:	cb cf       	rjmp	.-106    	; 0x36c <_Z6Task_3v>

000003d6 <_Z6Task_4v>:
     3d6:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <myTask4+0x1>
	}
}

void Task_4(){
	while(1){
		if(myTask4.getStatus() == ON){
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <_Z6Task_4v>
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
     3de:	c0 ef       	ldi	r28, 0xF0	; 240
     3e0:	d2 e0       	ldi	r29, 0x02	; 2
}

void Task_4(){
	while(1){
		if(myTask4.getStatus() == ON){
			myTask4.getSemaphor()->wait_aquire();
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	9b 81       	ldd	r25, Y+3	; 0x03
     3e6:	42 d2       	rcall	.+1156   	; 0x86c <_ZN14BinarySemaphor11wait_aquireEv>
			myTask4.getQueue()->clear();
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	9d 81       	ldd	r25, Y+5	; 0x05
     3ec:	72 d2       	rcall	.+1252   	; 0x8d2 <_ZN12BoundedQueue5clearEv>
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
     3ee:	a0 ef       	ldi	r26, 0xF0	; 240
     3f0:	b2 e0       	ldi	r27, 0x02	; 2
     3f2:	18 96       	adiw	r26, 0x08	; 8
     3f4:	ed 91       	ld	r30, X+
     3f6:	fc 91       	ld	r31, X
     3f8:	19 97       	sbiw	r26, 0x09	; 9
		uint8_t getString_Index(void){return string_index;}
     3fa:	1a 96       	adiw	r26, 0x0a	; 10
     3fc:	8c 91       	ld	r24, X
void Task_4(){
	while(1){
		if(myTask4.getStatus() == ON){
			myTask4.getSemaphor()->wait_aquire();
			myTask4.getQueue()->clear();
			while ('\0' != myTask4.getString()[myTask4.getString_Index()]){
     3fe:	e8 0f       	add	r30, r24
     400:	f1 1d       	adc	r31, r1
     402:	60 81       	ld	r22, Z
     404:	66 23       	and	r22, r22
     406:	a1 f0       	breq	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

				if(myTask4.getQueue()->write(myTask4.getString()[myTask4.getString_Index()]) == false){
     408:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <myTask4+0x4>
     40c:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <myTask4+0x5>
     410:	80 d2       	rcall	.+1280   	; 0x912 <_ZN12BoundedQueue5writeEh>
     412:	81 11       	cpse	r24, r1
     414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     416:	e0 ef       	ldi	r30, 0xF0	; 240
     418:	f2 e0       	ldi	r31, 0x02	; 2
			myTask4.getSemaphor()->wait_aquire();
			myTask4.getQueue()->clear();
			while ('\0' != myTask4.getString()[myTask4.getString_Index()]){

				if(myTask4.getQueue()->write(myTask4.getString()[myTask4.getString_Index()]) == false){
					myTask4.setString_Index(myTask4.getString_Index() - 1);
     41a:	82 85       	ldd	r24, Z+10	; 0x0a
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     41c:	81 50       	subi	r24, 0x01	; 1
			myTask4.getQueue()->clear();
			while ('\0' != myTask4.getString()[myTask4.getString_Index()]){

				if(myTask4.getQueue()->write(myTask4.getString()[myTask4.getString_Index()]) == false){
					myTask4.setString_Index(myTask4.getString_Index() - 1);
					yield();
     41e:	82 87       	std	Z+10, r24	; 0x0a
     420:	03 d7       	rcall	.+3590   	; 0x1228 <_Z5yieldv>
     422:	e5 cf       	rjmp	.-54     	; 0x3ee <_Z6Task_4v+0x18>
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
		const char* getString(void){return string;}
		uint8_t getString_Index(void){return string_index;}
     424:	e0 ef       	ldi	r30, 0xF0	; 240
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	82 85       	ldd	r24, Z+10	; 0x0a
				if(myTask4.getQueue()->write(myTask4.getString()[myTask4.getString_Index()]) == false){
					myTask4.setString_Index(myTask4.getString_Index() - 1);
					yield();
				}
				else{
					myTask4.setString_Index(myTask4.getString_Index() + 1);
     42a:	8f 5f       	subi	r24, 0xFF	; 255
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
		void setString(const char* str){string = str;}
		void setString_Index(uint8_t si){string_index = si;}
     42c:	82 87       	std	Z+10, r24	; 0x0a
     42e:	df cf       	rjmp	.-66     	; 0x3ee <_Z6Task_4v+0x18>
     430:	e0 ef       	ldi	r30, 0xF0	; 240
     432:	f2 e0       	ldi	r31, 0x02	; 2
				else{
					myTask4.setString_Index(myTask4.getString_Index() + 1);
				}
			}
			myTask4.setString_Index(0);
			myTask4.getSemaphor()->release();
     434:	12 86       	std	Z+10, r1	; 0x0a
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	93 81       	ldd	r25, Z+3	; 0x03
     43a:	34 d2       	rcall	.+1128   	; 0x8a4 <_ZN14BinarySemaphor7releaseEv>
			//myTask4.On_off();
			yield();
     43c:	f5 d6       	rcall	.+3562   	; 0x1228 <_Z5yieldv>
     43e:	cb cf       	rjmp	.-106    	; 0x3d6 <_Z6Task_4v>

00000440 <_Z8Viewer_1v>:
     440:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <myViewer1+0x4>
void Viewer_1(){
	while(1){
		//myViewer1.getSemaphor()->wait_aquire();
		//display.set_pos(3,0);									// ZUM VERSUCH
		//display.write_number(Queue_1.get_used_size(), 1);
		unsigned char output = myViewer1.getQueue()->read();
     444:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <myViewer1+0x5>
     448:	4c d2       	rcall	.+1176   	; 0x8e2 <_ZN12BoundedQueue4readEv>
     44a:	18 2f       	mov	r17, r24
		
		if (output == '1'){
     44c:	81 33       	cpi	r24, 0x31	; 49
     44e:	d9 f4       	brne	.+54     	; 0x486 <_Z8Viewer_1v+0x46>
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
     450:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <myViewer1+0x4>
     454:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <myViewer1+0x5>
		
		/*! \brief Liefere Anzahl aktuell noch freier Stellen der Queue. */
		uint8_t get_free_size ();

		/*! \brief Liefere Anzahl aktuell besetzter Stellen der Queue. */
		uint8_t get_used_size () {return count;};
     458:	fc 01       	movw	r30, r24
     45a:	21 81       	ldd	r18, Z+1	; 0x01
		//display.set_pos(3,0);									// ZUM VERSUCH
		//display.write_number(Queue_1.get_used_size(), 1);
		unsigned char output = myViewer1.getQueue()->read();
		
		if (output == '1'){
			while(myViewer1.getQueue()->get_used_size()){
     45c:	22 23       	and	r18, r18
				output = myViewer1.getQueue()->read();
     45e:	89 f0       	breq	.+34     	; 0x482 <_Z8Viewer_1v+0x42>
     460:	40 d2       	rcall	.+1152   	; 0x8e2 <_ZN12BoundedQueue4readEv>
     462:	18 2f       	mov	r17, r24
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     464:	c1 e1       	ldi	r28, 0x11	; 17
     466:	d3 e0       	ldi	r29, 0x03	; 3
     468:	4f 81       	ldd	r20, Y+7	; 0x07
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
     46a:	6e 81       	ldd	r22, Y+6	; 0x06
		unsigned char output = myViewer1.getQueue()->read();
		
		if (output == '1'){
			while(myViewer1.getQueue()->get_used_size()){
				output = myViewer1.getQueue()->read();
				display.set_pos(myTask1.getDisp_Row_Pos(), myTask1.getDisp_Col_Pos());
     46c:	8c e4       	ldi	r24, 0x4C	; 76
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	b8 d4       	rcall	.+2416   	; 0xde2 <_ZN3LCD7set_posEhh>
				display.write_char(output);
     472:	61 2f       	mov	r22, r17
     474:	8c e4       	ldi	r24, 0x4C	; 76
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	cb d5       	rcall	.+2966   	; 0x1010 <_ZN3LCD10write_charEc>
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     47a:	8f 81       	ldd	r24, Y+7	; 0x07
		if (output == '1'){
			while(myViewer1.getQueue()->get_used_size()){
				output = myViewer1.getQueue()->read();
				display.set_pos(myTask1.getDisp_Row_Pos(), myTask1.getDisp_Col_Pos());
				display.write_char(output);
				myTask1.setDisp_Col_Pos(myTask1.getDisp_Col_Pos() + 1);
     47c:	8f 5f       	subi	r24, 0xFF	; 255
		
		void setStatus(uint8_t st){status = st;}
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
     47e:	8f 83       	std	Y+7, r24	; 0x07
     480:	e7 cf       	rjmp	.-50     	; 0x450 <_Z8Viewer_1v+0x10>
     482:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <myTask1+0x7>
				display.write_char(output);
				myTask1.setDisp_Col_Pos(myTask1.getDisp_Col_Pos() + 1);
			}
			myTask1.setDisp_Col_Pos(0);
		}
		if(output == '2'){
     486:	12 33       	cpi	r17, 0x32	; 50
     488:	e1 f4       	brne	.+56     	; 0x4c2 <_Z8Viewer_1v+0x82>
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
     48a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <myViewer1+0x4>
     48e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <myViewer1+0x5>
     492:	fc 01       	movw	r30, r24
				myTask1.setDisp_Col_Pos(myTask1.getDisp_Col_Pos() + 1);
			}
			myTask1.setDisp_Col_Pos(0);
		}
		if(output == '2'){
			while(myViewer1.getQueue()->get_used_size()){
     494:	21 81       	ldd	r18, Z+1	; 0x01
     496:	22 23       	and	r18, r18
				output = myViewer1.getQueue()->read();
     498:	89 f0       	breq	.+34     	; 0x4bc <_Z8Viewer_1v+0x7c>
     49a:	23 d2       	rcall	.+1094   	; 0x8e2 <_ZN12BoundedQueue4readEv>
     49c:	18 2f       	mov	r17, r24
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     49e:	c6 e0       	ldi	r28, 0x06	; 6
     4a0:	d3 e0       	ldi	r29, 0x03	; 3
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
     4a2:	4f 81       	ldd	r20, Y+7	; 0x07
			myTask1.setDisp_Col_Pos(0);
		}
		if(output == '2'){
			while(myViewer1.getQueue()->get_used_size()){
				output = myViewer1.getQueue()->read();
				display.set_pos(myTask2.getDisp_Row_Pos(), myTask2.getDisp_Col_Pos());
     4a4:	6e 81       	ldd	r22, Y+6	; 0x06
     4a6:	8c e4       	ldi	r24, 0x4C	; 76
     4a8:	93 e0       	ldi	r25, 0x03	; 3
				display.write_char(output);
     4aa:	9b d4       	rcall	.+2358   	; 0xde2 <_ZN3LCD7set_posEhh>
     4ac:	61 2f       	mov	r22, r17
     4ae:	8c e4       	ldi	r24, 0x4C	; 76
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	ae d5       	rcall	.+2908   	; 0x1010 <_ZN3LCD10write_charEc>
		
		void setStatus(uint8_t st){status = st;}
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
     4b4:	8f 81       	ldd	r24, Y+7	; 0x07
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	8f 83       	std	Y+7, r24	; 0x07
     4ba:	e7 cf       	rjmp	.-50     	; 0x48a <_Z8Viewer_1v+0x4a>
     4bc:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <myTask2+0x7>
				myTask2.setDisp_Col_Pos(myTask2.getDisp_Col_Pos() + 1);
			}
			myTask2.setDisp_Col_Pos(0);
		}
		else{
			yield();
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <_Z8Viewer_1v+0x84>
		}
		//myViewer1.getSemaphor()->release();
		yield();
     4c2:	b2 d6       	rcall	.+3428   	; 0x1228 <_Z5yieldv>
     4c4:	b1 d6       	rcall	.+3426   	; 0x1228 <_Z5yieldv>
		}
	}
}

void Viewer_1(){
	while(1){
     4c6:	bc cf       	rjmp	.-136    	; 0x440 <_Z8Viewer_1v>

000004c8 <_Z8Viewer_2v>:
void Viewer_2(){
	while(1){
		//myViewer2.getSemaphor()->wait_aquire();
		//display.set_pos(3,0);									// ZUM VERSUCH
		//display.write_number(Queue_1.get_used_size(), 1);
		unsigned char output = myViewer2.getQueue()->read();
     4c8:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <__data_end+0x4>
     4cc:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <__data_end+0x5>
     4d0:	08 d2       	rcall	.+1040   	; 0x8e2 <_ZN12BoundedQueue4readEv>
     4d2:	18 2f       	mov	r17, r24
		
		if (output == '3'){
     4d4:	83 33       	cpi	r24, 0x33	; 51
     4d6:	d9 f4       	brne	.+54     	; 0x50e <_Z8Viewer_2v+0x46>
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
     4d8:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <__data_end+0x4>
     4dc:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <__data_end+0x5>
     4e0:	fc 01       	movw	r30, r24
     4e2:	21 81       	ldd	r18, Z+1	; 0x01
		//display.set_pos(3,0);									// ZUM VERSUCH
		//display.write_number(Queue_1.get_used_size(), 1);
		unsigned char output = myViewer2.getQueue()->read();
		
		if (output == '3'){
			while(myViewer2.getQueue()->get_used_size()){
     4e4:	22 23       	and	r18, r18
				output = myViewer2.getQueue()->read();
     4e6:	89 f0       	breq	.+34     	; 0x50a <_Z8Viewer_2v+0x42>
     4e8:	fc d1       	rcall	.+1016   	; 0x8e2 <_ZN12BoundedQueue4readEv>
     4ea:	18 2f       	mov	r17, r24
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     4ec:	cb ef       	ldi	r28, 0xFB	; 251
     4ee:	d2 e0       	ldi	r29, 0x02	; 2
     4f0:	4f 81       	ldd	r20, Y+7	; 0x07
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
     4f2:	6e 81       	ldd	r22, Y+6	; 0x06
		unsigned char output = myViewer2.getQueue()->read();
		
		if (output == '3'){
			while(myViewer2.getQueue()->get_used_size()){
				output = myViewer2.getQueue()->read();
				display.set_pos(myTask3.getDisp_Row_Pos(), myTask3.getDisp_Col_Pos());
     4f4:	8c e4       	ldi	r24, 0x4C	; 76
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	74 d4       	rcall	.+2280   	; 0xde2 <_ZN3LCD7set_posEhh>
				display.write_char(output);
     4fa:	61 2f       	mov	r22, r17
     4fc:	8c e4       	ldi	r24, 0x4C	; 76
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	87 d5       	rcall	.+2830   	; 0x1010 <_ZN3LCD10write_charEc>
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     502:	8f 81       	ldd	r24, Y+7	; 0x07
		if (output == '3'){
			while(myViewer2.getQueue()->get_used_size()){
				output = myViewer2.getQueue()->read();
				display.set_pos(myTask3.getDisp_Row_Pos(), myTask3.getDisp_Col_Pos());
				display.write_char(output);
				myTask3.setDisp_Col_Pos(myTask3.getDisp_Col_Pos() + 1);
     504:	8f 5f       	subi	r24, 0xFF	; 255
		
		void setStatus(uint8_t st){status = st;}
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
     506:	8f 83       	std	Y+7, r24	; 0x07
     508:	e7 cf       	rjmp	.-50     	; 0x4d8 <_Z8Viewer_2v+0x10>
     50a:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <myTask3+0x7>
				myTask3.setDisp_Col_Pos(myTask3.getDisp_Col_Pos() + 1);
			}
			myTask3.setDisp_Col_Pos(0);
		}
		
		if(output == '4'){
     50e:	14 33       	cpi	r17, 0x34	; 52
     510:	e1 f4       	brne	.+56     	; 0x54a <_Z8Viewer_2v+0x82>
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
		BinarySemaphor* getSemaphor(void){return semaphor;}
		BoundedQueue* getQueue(void){return queue;}
     512:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <__data_end+0x4>
     516:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <__data_end+0x5>
     51a:	fc 01       	movw	r30, r24
			}
			myTask3.setDisp_Col_Pos(0);
		}
		
		if(output == '4'){
			while(myViewer2.getQueue()->get_used_size()){
     51c:	21 81       	ldd	r18, Z+1	; 0x01
     51e:	22 23       	and	r18, r18
				output = myViewer2.getQueue()->read();
     520:	89 f0       	breq	.+34     	; 0x544 <_Z8Viewer_2v+0x7c>
     522:	df d1       	rcall	.+958    	; 0x8e2 <_ZN12BoundedQueue4readEv>
     524:	18 2f       	mov	r17, r24
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
		uint8_t getDisp_Col_Pos(void){return display_col_position;}
     526:	c0 ef       	ldi	r28, 0xF0	; 240
     528:	d2 e0       	ldi	r29, 0x02	; 2
			display_col_position = disp_col_pos;
			string_index = 0;
		}
		uint8_t getId(void){return tid;}
		uint8_t getStatus(void){return status;}
		uint8_t getDisp_Row_Pos(void){return display_row_position;}
     52a:	4f 81       	ldd	r20, Y+7	; 0x07
		}
		
		if(output == '4'){
			while(myViewer2.getQueue()->get_used_size()){
				output = myViewer2.getQueue()->read();
				display.set_pos(myTask4.getDisp_Row_Pos(), myTask4.getDisp_Col_Pos());
     52c:	6e 81       	ldd	r22, Y+6	; 0x06
     52e:	8c e4       	ldi	r24, 0x4C	; 76
     530:	93 e0       	ldi	r25, 0x03	; 3
				display.write_char(output);
     532:	57 d4       	rcall	.+2222   	; 0xde2 <_ZN3LCD7set_posEhh>
     534:	61 2f       	mov	r22, r17
     536:	8c e4       	ldi	r24, 0x4C	; 76
     538:	93 e0       	ldi	r25, 0x03	; 3
     53a:	6a d5       	rcall	.+2772   	; 0x1010 <_ZN3LCD10write_charEc>
		
		void setStatus(uint8_t st){status = st;}
		void setSemaphor(BinarySemaphor* sem){semaphor = sem;}
		void setQueue(BoundedQueue* q){queue = q;}
		void setDisp_Row_Pos(uint8_t drp){display_row_position = drp;}
		void setDisp_Col_Pos(uint8_t dcp){display_col_position = dcp;}
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	8f 83       	std	Y+7, r24	; 0x07
     542:	e7 cf       	rjmp	.-50     	; 0x512 <_Z8Viewer_2v+0x4a>
     544:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <myTask4+0x7>
			}
			myTask4.setDisp_Col_Pos(0);
		}
		
		else{
			yield();
     548:	01 c0       	rjmp	.+2      	; 0x54c <_Z8Viewer_2v+0x84>
		}
		//myViewer2.getSemaphor()->release();
		yield();
     54a:	6e d6       	rcall	.+3292   	; 0x1228 <_Z5yieldv>
     54c:	6d d6       	rcall	.+3290   	; 0x1228 <_Z5yieldv>
		yield();
	}
}

void Viewer_2(){
	while(1){
     54e:	bc cf       	rjmp	.-136    	; 0x4c8 <_Z8Viewer_2v>

00000550 <_Z41__static_initialization_and_destruction_0ii>:
	deactivate(myTask3.getId());
	deactivate(myTask4.getId());
	
	kernel(JitterControl);

}
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	09 f0       	breq	.+2      	; 0x568 <_Z41__static_initialization_and_destruction_0ii+0x18>
     566:	b2 c0       	rjmp	.+356    	; 0x6cc <_Z41__static_initialization_and_destruction_0ii+0x17c>
     568:	6f 3f       	cpi	r22, 0xFF	; 255
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	09 f0       	breq	.+2      	; 0x570 <_Z41__static_initialization_and_destruction_0ii+0x20>
     56e:	ae c0       	rjmp	.+348    	; 0x6cc <_Z41__static_initialization_and_destruction_0ii+0x17c>
void Task_4(void);
void Viewer_1(void);
void Viewer_2(void);
//================================================================================================
// OBJEKT INSTANZIEREN
DigiPortRaw keys(PK, SET_IN_PORT);
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	69 e0       	ldi	r22, 0x09	; 9
     576:	8c e5       	ldi	r24, 0x5C	; 92
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	8f d2       	rcall	.+1310   	; 0xa9a <_ZN11DigiPortRawC1Ehhh>
DigiPortRaw leds(PA, SET_OUT_PORT);
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	4f ef       	ldi	r20, 0xFF	; 255
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	86 e5       	ldi	r24, 0x56	; 86
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	89 d2       	rcall	.+1298   	; 0xa9a <_ZN11DigiPortRawC1Ehhh>
LCD display(PC, LCD_Type_40x4);
     588:	2f e8       	ldi	r18, 0x8F	; 143
     58a:	49 e0       	ldi	r20, 0x09	; 9
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	8c e4       	ldi	r24, 0x4C	; 76
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0b d5       	rcall	.+2582   	; 0xfaa <_ZN3LCDC1Eh10LCD_Type_th>
Timer16 timer(TC1, blinker);
     594:	e1 2c       	mov	r14, r1
     596:	f1 2c       	mov	r15, r1
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	45 e0       	ldi	r20, 0x05	; 5
     5a2:	51 e0       	ldi	r21, 0x01	; 1
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	8a e3       	ldi	r24, 0x3A	; 58
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN7Timer16C1EhPFvvES1_S1_S1_>
class BinarySemaphor {
	private:
		uint8_t owner;
		
	public:
		BinarySemaphor () : owner(0) {};
     5ae:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <shared_resource_semaphor_1>
     5b2:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <shared_resource_semaphor_2>
		     \param [in]  m Steuert das Verhalten bei Vollaufen der Queue. 
			 
			 Im Modus NO_OVERWRITE lehnt die Queue weitere Schreibevorgaenge ab (der Aufruf 
			 scheitert), wenn die Queue voll ist. Im Modus ALLOW_OVERWRITE wird in diesem
			 Fall der aelteste Eintrag der Queue ueberschrieben. */
	    BoundedQueue (uint8_t m = NO_OVERWRITE) {read_pos = 0; write_pos = 0; count = 0; mode = m;};
     5b6:	0f 2e       	mov	r0, r31
     5b8:	fa e2       	ldi	r31, 0x2A	; 42
     5ba:	cf 2e       	mov	r12, r31
     5bc:	f3 e0       	ldi	r31, 0x03	; 3
     5be:	df 2e       	mov	r13, r31
     5c0:	f0 2d       	mov	r31, r0
     5c2:	f6 01       	movw	r30, r12
     5c4:	13 82       	std	Z+3, r1	; 0x03
     5c6:	12 82       	std	Z+2, r1	; 0x02
     5c8:	11 82       	std	Z+1, r1	; 0x01
     5ca:	bb 24       	eor	r11, r11
     5cc:	b3 94       	inc	r11
     5ce:	b0 82       	st	Z, r11
     5d0:	cc e1       	ldi	r28, 0x1C	; 28
     5d2:	d3 e0       	ldi	r29, 0x03	; 3
     5d4:	1b 82       	std	Y+3, r1	; 0x03
     5d6:	1a 82       	std	Y+2, r1	; 0x02
     5d8:	19 82       	std	Y+1, r1	; 0x01
     5da:	b8 82       	st	Y, r11
BinarySemaphor shared_resource_semaphor_1;
BinarySemaphor shared_resource_semaphor_2;
BoundedQueue Queue_1;
BoundedQueue Queue_2; // BoundedQueue::BoundedQueue	(uint8_t m = NO_OVERWRITE)

Tasks myTask1(task_insert(Task_1,Low), &shared_resource_semaphor_1, &Queue_1, task_1_str, 0, 0, OFF);
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	8c e4       	ldi	r24, 0x4C	; 76
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	68 d5       	rcall	.+2768   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     5e4:	e1 e1       	ldi	r30, 0x11	; 17
     5e6:	f3 e0       	ldi	r31, 0x03	; 3
     5e8:	80 83       	st	Z, r24
			status = onoff;
     5ea:	11 82       	std	Z+1, r1	; 0x01
			semaphor = semaphoren;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f9 e3       	ldi	r31, 0x39	; 57
     5f0:	ef 2e       	mov	r14, r31
     5f2:	f3 e0       	ldi	r31, 0x03	; 3
     5f4:	ff 2e       	mov	r15, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	f3 82       	std	Z+3, r15	; 0x03
     5fa:	e2 82       	std	Z+2, r14	; 0x02
			queue = q;
     5fc:	d5 82       	std	Z+5, r13	; 0x05
     5fe:	c4 82       	std	Z+4, r12	; 0x04
			string = str;
     600:	84 e2       	ldi	r24, 0x24	; 36
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	91 87       	std	Z+9, r25	; 0x09
     606:	80 87       	std	Z+8, r24	; 0x08
			display_row_position = disp_row_pos;
     608:	16 82       	std	Z+6, r1	; 0x06
			display_col_position = disp_col_pos;
     60a:	17 82       	std	Z+7, r1	; 0x07
BinarySemaphor shared_resource_semaphor_2;
BoundedQueue Queue_1;
BoundedQueue Queue_2; // BoundedQueue::BoundedQueue	(uint8_t m = NO_OVERWRITE)

Tasks myTask1(task_insert(Task_1,Low), &shared_resource_semaphor_1, &Queue_1, task_1_str, 0, 0, OFF);
Tasks myTask2(task_insert(Task_2,Low), &shared_resource_semaphor_1, &Queue_1, task_2_str, 1, 0, OFF);
     60c:	12 86       	std	Z+10, r1	; 0x0a
     60e:	64 e0       	ldi	r22, 0x04	; 4
     610:	81 e8       	ldi	r24, 0x81	; 129
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	4f d5       	rcall	.+2718   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	80 83       	st	Z, r24
			status = onoff;
     61c:	11 82       	std	Z+1, r1	; 0x01
			semaphor = semaphoren;
     61e:	f3 82       	std	Z+3, r15	; 0x03
     620:	e2 82       	std	Z+2, r14	; 0x02
			queue = q;
     622:	d5 82       	std	Z+5, r13	; 0x05
     624:	c4 82       	std	Z+4, r12	; 0x04
			string = str;
     626:	8c e1       	ldi	r24, 0x1C	; 28
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	91 87       	std	Z+9, r25	; 0x09
     62c:	80 87       	std	Z+8, r24	; 0x08
			display_row_position = disp_row_pos;
     62e:	b6 82       	std	Z+6, r11	; 0x06
			display_col_position = disp_col_pos;
			string_index = 0;
     630:	17 82       	std	Z+7, r1	; 0x07
BoundedQueue Queue_1;
BoundedQueue Queue_2; // BoundedQueue::BoundedQueue	(uint8_t m = NO_OVERWRITE)

Tasks myTask1(task_insert(Task_1,Low), &shared_resource_semaphor_1, &Queue_1, task_1_str, 0, 0, OFF);
Tasks myTask2(task_insert(Task_2,Low), &shared_resource_semaphor_1, &Queue_1, task_2_str, 1, 0, OFF);
Tasks myTask3(task_insert(Task_3,Low), &shared_resource_semaphor_2, &Queue_2, "3LALALA", 2, 0, OFF);
     632:	12 86       	std	Z+10, r1	; 0x0a
     634:	64 e0       	ldi	r22, 0x04	; 4
     636:	86 eb       	ldi	r24, 0xB6	; 182
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	3c d5       	rcall	.+2680   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     63c:	eb ef       	ldi	r30, 0xFB	; 251
     63e:	f2 e0       	ldi	r31, 0x02	; 2
     640:	80 83       	st	Z, r24
			status = onoff;
     642:	11 82       	std	Z+1, r1	; 0x01
			semaphor = semaphoren;
     644:	08 e3       	ldi	r16, 0x38	; 56
     646:	13 e0       	ldi	r17, 0x03	; 3
     648:	13 83       	std	Z+3, r17	; 0x03
     64a:	02 83       	std	Z+2, r16	; 0x02
			queue = q;
     64c:	d5 83       	std	Z+5, r29	; 0x05
     64e:	c4 83       	std	Z+4, r28	; 0x04
			string = str;
     650:	89 e0       	ldi	r24, 0x09	; 9
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	91 87       	std	Z+9, r25	; 0x09
     656:	80 87       	std	Z+8, r24	; 0x08
			display_row_position = disp_row_pos;
     658:	82 e0       	ldi	r24, 0x02	; 2
			display_col_position = disp_col_pos;
     65a:	86 83       	std	Z+6, r24	; 0x06
			string_index = 0;
     65c:	17 82       	std	Z+7, r1	; 0x07
BoundedQueue Queue_2; // BoundedQueue::BoundedQueue	(uint8_t m = NO_OVERWRITE)

Tasks myTask1(task_insert(Task_1,Low), &shared_resource_semaphor_1, &Queue_1, task_1_str, 0, 0, OFF);
Tasks myTask2(task_insert(Task_2,Low), &shared_resource_semaphor_1, &Queue_1, task_2_str, 1, 0, OFF);
Tasks myTask3(task_insert(Task_3,Low), &shared_resource_semaphor_2, &Queue_2, "3LALALA", 2, 0, OFF);
Tasks myTask4(task_insert(Task_4,Low), &shared_resource_semaphor_2, &Queue_2, "4Noice! :)", 3, 0, OFF);
     65e:	12 86       	std	Z+10, r1	; 0x0a
     660:	64 e0       	ldi	r22, 0x04	; 4
     662:	8b ee       	ldi	r24, 0xEB	; 235
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	26 d5       	rcall	.+2636   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     668:	e0 ef       	ldi	r30, 0xF0	; 240
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	80 83       	st	Z, r24
			status = onoff;
     66e:	11 82       	std	Z+1, r1	; 0x01
			semaphor = semaphoren;
     670:	13 83       	std	Z+3, r17	; 0x03
     672:	02 83       	std	Z+2, r16	; 0x02
			queue = q;
     674:	d5 83       	std	Z+5, r29	; 0x05
     676:	c4 83       	std	Z+4, r28	; 0x04
			string = str;
     678:	81 e1       	ldi	r24, 0x11	; 17
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	91 87       	std	Z+9, r25	; 0x09
     67e:	80 87       	std	Z+8, r24	; 0x08
			display_row_position = disp_row_pos;
     680:	83 e0       	ldi	r24, 0x03	; 3
			display_col_position = disp_col_pos;
     682:	86 83       	std	Z+6, r24	; 0x06
			string_index = 0;
     684:	17 82       	std	Z+7, r1	; 0x07
Tasks myTask2(task_insert(Task_2,Low), &shared_resource_semaphor_1, &Queue_1, task_2_str, 1, 0, OFF);
Tasks myTask3(task_insert(Task_3,Low), &shared_resource_semaphor_2, &Queue_2, "3LALALA", 2, 0, OFF);
Tasks myTask4(task_insert(Task_4,Low), &shared_resource_semaphor_2, &Queue_2, "4Noice! :)", 3, 0, OFF);


Tasks myViewer1(task_insert(Viewer_1,Low), &shared_resource_semaphor_1, &Queue_1);
     686:	12 86       	std	Z+10, r1	; 0x0a
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	80 e2       	ldi	r24, 0x20	; 32
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	12 d5       	rcall	.+2596   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     690:	e5 ee       	ldi	r30, 0xE5	; 229
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	80 83       	st	Z, r24
			status = onoff;
     696:	b1 82       	std	Z+1, r11	; 0x01
			semaphor = semaphoren;
     698:	f3 82       	std	Z+3, r15	; 0x03
     69a:	e2 82       	std	Z+2, r14	; 0x02
			queue = q;
     69c:	d5 82       	std	Z+5, r13	; 0x05
     69e:	c4 82       	std	Z+4, r12	; 0x04
			string = str;
     6a0:	11 86       	std	Z+9, r1	; 0x09
			display_row_position = disp_row_pos;
     6a2:	10 86       	std	Z+8, r1	; 0x08
			display_col_position = disp_col_pos;
     6a4:	16 82       	std	Z+6, r1	; 0x06
			string_index = 0;
     6a6:	17 82       	std	Z+7, r1	; 0x07
Tasks myTask3(task_insert(Task_3,Low), &shared_resource_semaphor_2, &Queue_2, "3LALALA", 2, 0, OFF);
Tasks myTask4(task_insert(Task_4,Low), &shared_resource_semaphor_2, &Queue_2, "4Noice! :)", 3, 0, OFF);


Tasks myViewer1(task_insert(Viewer_1,Low), &shared_resource_semaphor_1, &Queue_1);
Tasks myViewer2(task_insert(Viewer_2,Low), &shared_resource_semaphor_2, &Queue_2);
     6a8:	12 86       	std	Z+10, r1	; 0x0a
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	01 d5       	rcall	.+2562   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
		const char* string;
		uint8_t string_index;
		
	public:
		Tasks(uint8_t id, BinarySemaphor* semaphoren, BoundedQueue* q, const char* str = NULL, uint8_t disp_row_pos = 0, uint8_t disp_col_pos = 0, uint8_t onoff = ON){
			tid = id;
     6b2:	ea ed       	ldi	r30, 0xDA	; 218
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	80 83       	st	Z, r24
			status = onoff;
     6b8:	b1 82       	std	Z+1, r11	; 0x01
			semaphor = semaphoren;
     6ba:	13 83       	std	Z+3, r17	; 0x03
     6bc:	02 83       	std	Z+2, r16	; 0x02
			queue = q;
     6be:	d5 83       	std	Z+5, r29	; 0x05
     6c0:	c4 83       	std	Z+4, r28	; 0x04
			string = str;
     6c2:	11 86       	std	Z+9, r1	; 0x09
     6c4:	10 86       	std	Z+8, r1	; 0x08
			display_row_position = disp_row_pos;
     6c6:	16 82       	std	Z+6, r1	; 0x06
			display_col_position = disp_col_pos;
     6c8:	17 82       	std	Z+7, r1	; 0x07
			string_index = 0;
     6ca:	12 86       	std	Z+10, r1	; 0x0a
	deactivate(myTask3.getId());
	deactivate(myTask4.getId());
	
	kernel(JitterControl);

}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	bf 90       	pop	r11
     6de:	08 95       	ret

000006e0 <_ZN5Tasks6On_offEv>:
			
		}
	}
}

void Tasks::On_off(){
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
	if(false == is_active(tid)){
     6e6:	88 81       	ld	r24, Y
     6e8:	74 d5       	rcall	.+2792   	; 0x11d2 <_Z9is_activeh>
     6ea:	81 11       	cpse	r24, r1
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_ZN5Tasks6On_offEv+0x18>
		
		activate(tid);
     6ee:	88 81       	ld	r24, Y
     6f0:	4c d5       	rcall	.+2712   	; 0x118a <_Z8activateh>
		status = ON;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	89 83       	std	Y+1, r24	; 0x01
	}else{
		deactivate(tid);
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <_ZN5Tasks6On_offEv+0x1e>
     6f8:	88 81       	ld	r24, Y
     6fa:	c2 d5       	rcall	.+2948   	; 0x1280 <_Z10deactivateh>
		status = OFF;
     6fc:	19 82       	std	Y+1, r1	; 0x01
	}
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <_Z7Key_Ctlv>:
		//return IN_MASK & mask & ((mode==SET_ACTIVE_HIGH) ? (*(base + IN_OFFSET)) : ~(*(base + IN_OFFSET)));
	//};
	
	virtual inline uint8_t read_raw(uint8_t mask=0xFF) {
		uint8_t ret_val;
		CRITICAL_SECTION {
     704:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     706:	f8 94       	cli
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	88 23       	and	r24, r24
     70c:	b9 f0       	breq	.+46     	; 0x73c <_Z7Key_Ctlv+0x38>
		 ret_val = IN_MASK & mask & ((mode==SET_ACTIVE_HIGH) ? (*(base + IN_OFFSET)) : ~(*(base + IN_OFFSET)));
     70e:	ec e5       	ldi	r30, 0x5C	; 92
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	84 81       	ldd	r24, Z+4	; 0x04
     714:	80 95       	com	r24
     716:	95 81       	ldd	r25, Z+5	; 0x05
     718:	9f 3f       	cpi	r25, 0xFF	; 255
     71a:	31 f4       	brne	.+12     	; 0x728 <_Z7Key_Ctlv+0x24>
     71c:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <keys+0x2>
     720:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <keys+0x3>
     724:	90 81       	ld	r25, Z
     726:	06 c0       	rjmp	.+12     	; 0x734 <_Z7Key_Ctlv+0x30>
     728:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <keys+0x2>
     72c:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <keys+0x3>
     730:	90 81       	ld	r25, Z
     732:	90 95       	com	r25
     734:	c8 2f       	mov	r28, r24
     736:	c9 23       	and	r28, r25
		//return IN_MASK & mask & ((mode==SET_ACTIVE_HIGH) ? (*(base + IN_OFFSET)) : ~(*(base + IN_OFFSET)));
	//};
	
	virtual inline uint8_t read_raw(uint8_t mask=0xFF) {
		uint8_t ret_val;
		CRITICAL_SECTION {
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	e7 cf       	rjmp	.-50     	; 0x70a <_Z7Key_Ctlv+0x6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     73c:	2f bf       	out	0x3f, r18	; 63
	leds.toggle(~(0b00001111));
}

void Key_Ctl(void){			//WORKING
	while(1){
		key_in = keys.read_raw();
     73e:	c0 93 68 03 	sts	0x0368, r28	; 0x800368 <key_in>
		switch((uint8_t)~(key_in)){
     742:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <key_in>
     746:	80 95       	com	r24
     748:	8f 3e       	cpi	r24, 0xEF	; 239
     74a:	11 f1       	breq	.+68     	; 0x790 <_Z7Key_Ctlv+0x8c>
     74c:	38 f4       	brcc	.+14     	; 0x75c <_Z7Key_Ctlv+0x58>
     74e:	8f 3b       	cpi	r24, 0xBF	; 191
     750:	71 f1       	breq	.+92     	; 0x7ae <_Z7Key_Ctlv+0xaa>
     752:	8f 3d       	cpi	r24, 0xDF	; 223
     754:	21 f1       	breq	.+72     	; 0x79e <_Z7Key_Ctlv+0x9a>
     756:	8f 37       	cpi	r24, 0x7F	; 127
     758:	a9 f6       	brne	.-86     	; 0x704 <_Z7Key_Ctlv>
     75a:	31 c0       	rjmp	.+98     	; 0x7be <_Z7Key_Ctlv+0xba>
     75c:	8b 3f       	cpi	r24, 0xFB	; 251
     75e:	81 f0       	breq	.+32     	; 0x780 <_Z7Key_Ctlv+0x7c>
     760:	18 f4       	brcc	.+6      	; 0x768 <_Z7Key_Ctlv+0x64>
     762:	87 3f       	cpi	r24, 0xF7	; 247
     764:	89 f0       	breq	.+34     	; 0x788 <_Z7Key_Ctlv+0x84>
     766:	ce cf       	rjmp	.-100    	; 0x704 <_Z7Key_Ctlv>
     768:	8d 3f       	cpi	r24, 0xFD	; 253
     76a:	31 f0       	breq	.+12     	; 0x778 <_Z7Key_Ctlv+0x74>
     76c:	8e 3f       	cpi	r24, 0xFE	; 254
     76e:	51 f6       	brne	.-108    	; 0x704 <_Z7Key_Ctlv>
			case 0b11111110:
			myTask1.On_off();
     770:	81 e1       	ldi	r24, 0x11	; 17
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	b5 df       	rcall	.-150    	; 0x6e0 <_ZN5Tasks6On_offEv>
			break;
     776:	c6 cf       	rjmp	.-116    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b11111101:
			myTask2.On_off();
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	93 e0       	ldi	r25, 0x03	; 3
     77c:	b1 df       	rcall	.-158    	; 0x6e0 <_ZN5Tasks6On_offEv>
			break;
     77e:	c2 cf       	rjmp	.-124    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b11111011:
			myTask3.On_off();
     780:	8b ef       	ldi	r24, 0xFB	; 251
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	ad df       	rcall	.-166    	; 0x6e0 <_ZN5Tasks6On_offEv>
			break;
			
			case 0b11110111:
			myTask4.On_off();
     786:	be cf       	rjmp	.-132    	; 0x704 <_Z7Key_Ctlv>
     788:	80 ef       	ldi	r24, 0xF0	; 240
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	a9 df       	rcall	.-174    	; 0x6e0 <_ZN5Tasks6On_offEv>
			break;
     78e:	ba cf       	rjmp	.-140    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b11101111:							// Taste 4 LEFT SIDE 
			led_1.status = ON;
     790:	e5 e6       	ldi	r30, 0x65	; 101
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	80 83       	st	Z, r24
			led_1.request_delay = 1;
     798:	82 83       	std	Z+2, r24	; 0x02
			led_1.current_delay = led_1.request_delay;
     79a:	81 83       	std	Z+1, r24	; 0x01
			break;
     79c:	b3 cf       	rjmp	.-154    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b11011111:							// Taste 5
			led_1.status = ON;
     79e:	e5 e6       	ldi	r30, 0x65	; 101
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 83       	st	Z, r24
			led_1.request_delay = 3;
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	82 83       	std	Z+2, r24	; 0x02
			led_1.current_delay = led_1.request_delay;
     7aa:	81 83       	std	Z+1, r24	; 0x01
			break;
     7ac:	ab cf       	rjmp	.-170    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b10111111:							// Taste 6 RIGHTSIDE
			led_2.status = ON;
     7ae:	e2 e6       	ldi	r30, 0x62	; 98
     7b0:	f3 e0       	ldi	r31, 0x03	; 3
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 83       	st	Z, r24
			led_2.request_delay = 2;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	82 83       	std	Z+2, r24	; 0x02
			led_2.current_delay = led_2.request_delay;
     7ba:	81 83       	std	Z+1, r24	; 0x01
			break;
     7bc:	a3 cf       	rjmp	.-186    	; 0x704 <_Z7Key_Ctlv>
			
			case 0b01111111:							// Taste 7
			led_2.status = ON;
     7be:	e2 e6       	ldi	r30, 0x62	; 98
     7c0:	f3 e0       	ldi	r31, 0x03	; 3
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 83       	st	Z, r24
			led_2.request_delay = 4;
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	82 83       	std	Z+2, r24	; 0x02
			led_2.current_delay = led_2.request_delay;
     7ca:	81 83       	std	Z+1, r24	; 0x01
			break;
     7cc:	9b cf       	rjmp	.-202    	; 0x704 <_Z7Key_Ctlv>

000007ce <main>:
}

//================================================================================================
int main(void)
{
	timer.start_ms(500);
     7ce:	ee 24       	eor	r14, r14
     7d0:	ea 94       	dec	r14
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	64 ef       	ldi	r22, 0xF4	; 244
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	8a e3       	ldi	r24, 0x3A	; 58
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN7Timer168start_msEjjjjh>
	
	task_insert(Key_Ctl, High);
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	82 e8       	ldi	r24, 0x82	; 130
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	61 d4       	rcall	.+2242   	; 0x10b4 <_Z11task_insertPFvvE8Priority>
	display.set_pos(0, 0);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	8c e4       	ldi	r24, 0x4C	; 76
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	f3 d2       	rcall	.+1510   	; 0xde2 <_ZN3LCD7set_posEhh>
	display.clear();
     7fc:	8c e4       	ldi	r24, 0x4C	; 76
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	38 d4       	rcall	.+2160   	; 0x1072 <_ZN3LCD5clearEv>
    /*! \brief Schalte die durch bits spezifizierten Bits des Ports aus.
		\param [in] bits Bitmuster in active-high Logik.  Default 0xFF. Bitpositionen, die
		            beim Port zur Eingabe konfiguriert sind, werden dabei ignoriert.
	*/
    virtual inline void off (uint8_t bits=0xFF) {
		CRITICAL_SECTION {  
     802:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     804:	f8 94       	cli
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	01 c0       	rjmp	.+2      	; 0x80c <main+0x3e>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	88 23       	and	r24, r24
     80e:	b9 f0       	breq	.+46     	; 0x83e <main+0x70>
			if (mode==SET_ACTIVE_HIGH)
     810:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <leds+0x5>
     814:	8f 3f       	cpi	r24, 0xFF	; 255
     816:	39 f4       	brne	.+14     	; 0x826 <main+0x58>
				*(base + OUT_OFFSET) &= (uint8_t)(OUT_MASK & (uint8_t)(~bits));
     818:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <leds+0x2>
     81c:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <leds+0x3>
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	12 82       	std	Z+2, r1	; 0x02
     824:	f2 cf       	rjmp	.-28     	; 0x80a <main+0x3c>
			else
				*(base + OUT_OFFSET) |= (uint8_t)(OUT_MASK & bits);
     826:	a6 e5       	ldi	r26, 0x56	; 86
     828:	b3 e0       	ldi	r27, 0x03	; 3
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	ed 91       	ld	r30, X+
     82e:	fc 91       	ld	r31, X
     830:	13 97       	sbiw	r26, 0x03	; 3
     832:	92 81       	ldd	r25, Z+2	; 0x02
     834:	14 96       	adiw	r26, 0x04	; 4
     836:	8c 91       	ld	r24, X
     838:	89 2b       	or	r24, r25
     83a:	82 83       	std	Z+2, r24	; 0x02
     83c:	e6 cf       	rjmp	.-52     	; 0x80a <main+0x3c>
	leds.off();
	deactivate(myTask1.getId());
     83e:	2f bf       	out	0x3f, r18	; 63
     840:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <myTask1>
	deactivate(myTask2.getId());
     844:	1d d5       	rcall	.+2618   	; 0x1280 <_Z10deactivateh>
     846:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <myTask2>
	deactivate(myTask3.getId());
     84a:	1a d5       	rcall	.+2612   	; 0x1280 <_Z10deactivateh>
     84c:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <myTask3>
	deactivate(myTask4.getId());
     850:	17 d5       	rcall	.+2606   	; 0x1280 <_Z10deactivateh>
     852:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <myTask4>
	
	kernel(JitterControl);
     856:	14 d5       	rcall	.+2600   	; 0x1280 <_Z10deactivateh>
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	ce d4       	rcall	.+2460   	; 0x11fc <_Z6kernel14SchedulingTypePFvhE>

00000860 <_GLOBAL__sub_I_key_in>:

}
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	7f ef       	ldi	r23, 0xFF	; 255
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	73 ce       	rjmp	.-794    	; 0x550 <_Z41__static_initialization_and_destruction_0ii>
     86a:	08 95       	ret

0000086c <_ZN14BinarySemaphor11wait_aquireEv>:
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	18 81       	ld	r17, Y
     876:	2c d5       	rcall	.+2648   	; 0x12d0 <_Z15current_task_idv>
     878:	18 17       	cp	r17, r24
     87a:	81 f0       	breq	.+32     	; 0x89c <_ZN14BinarySemaphor11wait_aquireEv+0x30>
     87c:	88 81       	ld	r24, Y
     87e:	88 23       	and	r24, r24
     880:	21 f0       	breq	.+8      	; 0x88a <_ZN14BinarySemaphor11wait_aquireEv+0x1e>
     882:	26 d5       	rcall	.+2636   	; 0x12d0 <_Z15current_task_idv>
     884:	28 d5       	rcall	.+2640   	; 0x12d6 <_Z8sem_waith>
     886:	d0 d4       	rcall	.+2464   	; 0x1228 <_Z5yieldv>
     888:	f5 cf       	rjmp	.-22     	; 0x874 <_ZN14BinarySemaphor11wait_aquireEv+0x8>
     88a:	1f b7       	in	r17, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	88 81       	ld	r24, Y
     890:	81 11       	cpse	r24, r1
     892:	02 c0       	rjmp	.+4      	; 0x898 <_ZN14BinarySemaphor11wait_aquireEv+0x2c>
     894:	1d d5       	rcall	.+2618   	; 0x12d0 <_Z15current_task_idv>
     896:	88 83       	st	Y, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     898:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
     89a:	ec cf       	rjmp	.-40     	; 0x874 <_ZN14BinarySemaphor11wait_aquireEv+0x8>
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	08 95       	ret

000008a4 <_ZN14BinarySemaphor7releaseEv>:
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8b0:	f8 94       	cli
     8b2:	08 81       	ld	r16, Y
     8b4:	0d d5       	rcall	.+2586   	; 0x12d0 <_Z15current_task_idv>
     8b6:	08 13       	cpse	r16, r24
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <_ZN14BinarySemaphor7releaseEv+0x1c>
     8ba:	18 82       	st	Y, r1
     8bc:	c1 e0       	ldi	r28, 0x01	; 1
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <_ZN14BinarySemaphor7releaseEv+0x1e>
     8c0:	c0 e0       	ldi	r28, 0x00	; 0
     8c2:	1f bf       	out	0x3f, r17	; 63
     8c4:	b1 d4       	rcall	.+2402   	; 0x1228 <_Z5yieldv>
     8c6:	8c 2f       	mov	r24, r28
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <_ZN12BoundedQueue5clearEv>:
     8d2:	fc 01       	movw	r30, r24
     8d4:	8f b7       	in	r24, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	12 82       	std	Z+2, r1	; 0x02
     8dc:	11 82       	std	Z+1, r1	; 0x01
     8de:	8f bf       	out	0x3f, r24	; 63
     8e0:	08 95       	ret

000008e2 <_ZN12BoundedQueue4readEv>:
     8e2:	fc 01       	movw	r30, r24
     8e4:	3f b7       	in	r19, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	91 11       	cpse	r25, r1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <_ZN12BoundedQueue4readEv+0x10>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e c0       	rjmp	.+28     	; 0x90e <_ZN12BoundedQueue4readEv+0x2c>
     8f2:	83 81       	ldd	r24, Z+3	; 0x03
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	28 0f       	add	r18, r24
     8f8:	23 83       	std	Z+3, r18	; 0x03
     8fa:	df 01       	movw	r26, r30
     8fc:	a8 0f       	add	r26, r24
     8fe:	b1 1d       	adc	r27, r1
     900:	14 96       	adiw	r26, 0x04	; 4
     902:	8c 91       	ld	r24, X
     904:	91 50       	subi	r25, 0x01	; 1
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	2a 30       	cpi	r18, 0x0A	; 10
     90a:	08 f0       	brcs	.+2      	; 0x90e <_ZN12BoundedQueue4readEv+0x2c>
     90c:	13 82       	std	Z+3, r1	; 0x03
     90e:	3f bf       	out	0x3f, r19	; 63
     910:	08 95       	ret

00000912 <_ZN12BoundedQueue5writeEh>:
     912:	fc 01       	movw	r30, r24
     914:	2f b7       	in	r18, 0x3f	; 63
     916:	f8 94       	cli
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	9a 30       	cpi	r25, 0x0A	; 10
     91c:	a0 f0       	brcs	.+40     	; 0x946 <_ZN12BoundedQueue5writeEh+0x34>
     91e:	80 81       	ld	r24, Z
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	71 f0       	breq	.+28     	; 0x940 <_ZN12BoundedQueue5writeEh+0x2e>
     924:	83 81       	ldd	r24, Z+3	; 0x03
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	8a 30       	cpi	r24, 0x0A	; 10
     92a:	10 f4       	brcc	.+4      	; 0x930 <_ZN12BoundedQueue5writeEh+0x1e>
     92c:	83 83       	std	Z+3, r24	; 0x03
     92e:	0b c0       	rjmp	.+22     	; 0x946 <_ZN12BoundedQueue5writeEh+0x34>
     930:	13 82       	std	Z+3, r1	; 0x03
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	89 0f       	add	r24, r25
     936:	81 83       	std	Z+1, r24	; 0x01
     938:	06 c0       	rjmp	.+12     	; 0x946 <_ZN12BoundedQueue5writeEh+0x34>
     93a:	12 82       	std	Z+2, r1	; 0x02
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <_ZN12BoundedQueue5writeEh+0x30>
     940:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     942:	2f bf       	out	0x3f, r18	; 63
     944:	08 95       	ret
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	98 0f       	add	r25, r24
     94c:	92 83       	std	Z+2, r25	; 0x02
     94e:	df 01       	movw	r26, r30
     950:	a8 0f       	add	r26, r24
     952:	b1 1d       	adc	r27, r1
     954:	14 96       	adiw	r26, 0x04	; 4
     956:	6c 93       	st	X, r22
     958:	81 81       	ldd	r24, Z+1	; 0x01
     95a:	8f 5f       	subi	r24, 0xFF	; 255
     95c:	81 83       	std	Z+1, r24	; 0x01
     95e:	9a 30       	cpi	r25, 0x0A	; 10
     960:	60 f7       	brcc	.-40     	; 0x93a <_ZN12BoundedQueue5writeEh+0x28>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	ee cf       	rjmp	.-36     	; 0x942 <_ZN12BoundedQueue5writeEh+0x30>

00000966 <_ZN11DigiPortRaw5writeEh>:
     966:	dc 01       	movw	r26, r24
     968:	2f b7       	in	r18, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	13 97       	sbiw	r26, 0x03	; 3
     974:	14 96       	adiw	r26, 0x04	; 4
     976:	9c 91       	ld	r25, X
     978:	14 97       	sbiw	r26, 0x04	; 4
     97a:	15 96       	adiw	r26, 0x05	; 5
     97c:	8c 91       	ld	r24, X
     97e:	8f 3f       	cpi	r24, 0xFF	; 255
     980:	09 f0       	breq	.+2      	; 0x984 <_ZN11DigiPortRaw5writeEh+0x1e>
     982:	60 95       	com	r22
     984:	69 23       	and	r22, r25
     986:	62 83       	std	Z+2, r22	; 0x02
     988:	2f bf       	out	0x3f, r18	; 63
     98a:	08 95       	ret

0000098c <_ZN11DigiPortRaw2onEh>:
     98c:	fc 01       	movw	r30, r24
     98e:	2f b7       	in	r18, 0x3f	; 63
     990:	f8 94       	cli
     992:	85 81       	ldd	r24, Z+5	; 0x05
     994:	8f 3f       	cpi	r24, 0xFF	; 255
     996:	59 f4       	brne	.+22     	; 0x9ae <_ZN11DigiPortRaw2onEh+0x22>
     998:	a2 81       	ldd	r26, Z+2	; 0x02
     99a:	b3 81       	ldd	r27, Z+3	; 0x03
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	8c 91       	ld	r24, X
     9a0:	12 97       	sbiw	r26, 0x02	; 2
     9a2:	94 81       	ldd	r25, Z+4	; 0x04
     9a4:	69 23       	and	r22, r25
     9a6:	68 2b       	or	r22, r24
     9a8:	12 96       	adiw	r26, 0x02	; 2
     9aa:	6c 93       	st	X, r22
     9ac:	0b c0       	rjmp	.+22     	; 0x9c4 <_ZN11DigiPortRaw2onEh+0x38>
     9ae:	a2 81       	ldd	r26, Z+2	; 0x02
     9b0:	b3 81       	ldd	r27, Z+3	; 0x03
     9b2:	12 96       	adiw	r26, 0x02	; 2
     9b4:	9c 91       	ld	r25, X
     9b6:	12 97       	sbiw	r26, 0x02	; 2
     9b8:	84 81       	ldd	r24, Z+4	; 0x04
     9ba:	89 23       	and	r24, r25
     9bc:	60 95       	com	r22
     9be:	68 23       	and	r22, r24
     9c0:	12 96       	adiw	r26, 0x02	; 2
     9c2:	6c 93       	st	X, r22
     9c4:	2f bf       	out	0x3f, r18	; 63
     9c6:	08 95       	ret

000009c8 <_ZN11DigiPortRaw3offEh>:
     9c8:	fc 01       	movw	r30, r24
     9ca:	2f b7       	in	r18, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	85 81       	ldd	r24, Z+5	; 0x05
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	61 f4       	brne	.+24     	; 0x9ec <_ZN11DigiPortRaw3offEh+0x24>
     9d4:	a2 81       	ldd	r26, Z+2	; 0x02
     9d6:	b3 81       	ldd	r27, Z+3	; 0x03
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	9c 91       	ld	r25, X
     9dc:	12 97       	sbiw	r26, 0x02	; 2
     9de:	84 81       	ldd	r24, Z+4	; 0x04
     9e0:	89 23       	and	r24, r25
     9e2:	60 95       	com	r22
     9e4:	68 23       	and	r22, r24
     9e6:	12 96       	adiw	r26, 0x02	; 2
     9e8:	6c 93       	st	X, r22
     9ea:	0a c0       	rjmp	.+20     	; 0xa00 <_ZN11DigiPortRaw3offEh+0x38>
     9ec:	a2 81       	ldd	r26, Z+2	; 0x02
     9ee:	b3 81       	ldd	r27, Z+3	; 0x03
     9f0:	12 96       	adiw	r26, 0x02	; 2
     9f2:	9c 91       	ld	r25, X
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	68 23       	and	r22, r24
     9fa:	69 2b       	or	r22, r25
     9fc:	12 96       	adiw	r26, 0x02	; 2
     9fe:	6c 93       	st	X, r22
     a00:	2f bf       	out	0x3f, r18	; 63
     a02:	08 95       	ret

00000a04 <_ZN11DigiPortRaw6toggleEh>:
     a04:	dc 01       	movw	r26, r24
     a06:	2f b7       	in	r18, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	12 96       	adiw	r26, 0x02	; 2
     a0c:	ed 91       	ld	r30, X+
     a0e:	fc 91       	ld	r31, X
     a10:	13 97       	sbiw	r26, 0x03	; 3
     a12:	92 81       	ldd	r25, Z+2	; 0x02
     a14:	14 96       	adiw	r26, 0x04	; 4
     a16:	8c 91       	ld	r24, X
     a18:	68 23       	and	r22, r24
     a1a:	69 27       	eor	r22, r25
     a1c:	62 83       	std	Z+2, r22	; 0x02
     a1e:	2f bf       	out	0x3f, r18	; 63
     a20:	08 95       	ret

00000a22 <_ZN11DigiPortRaw8read_rawEh>:
     a22:	fc 01       	movw	r30, r24
     a24:	2f b7       	in	r18, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	84 81       	ldd	r24, Z+4	; 0x04
     a2a:	80 95       	com	r24
     a2c:	68 23       	and	r22, r24
     a2e:	85 81       	ldd	r24, Z+5	; 0x05
     a30:	8f 3f       	cpi	r24, 0xFF	; 255
     a32:	29 f4       	brne	.+10     	; 0xa3e <_ZN11DigiPortRaw8read_rawEh+0x1c>
     a34:	02 80       	ldd	r0, Z+2	; 0x02
     a36:	f3 81       	ldd	r31, Z+3	; 0x03
     a38:	e0 2d       	mov	r30, r0
     a3a:	80 81       	ld	r24, Z
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <_ZN11DigiPortRaw8read_rawEh+0x28>
     a3e:	02 80       	ldd	r0, Z+2	; 0x02
     a40:	f3 81       	ldd	r31, Z+3	; 0x03
     a42:	e0 2d       	mov	r30, r0
     a44:	90 81       	ld	r25, Z
     a46:	89 2f       	mov	r24, r25
     a48:	80 95       	com	r24
     a4a:	2f bf       	out	0x3f, r18	; 63
     a4c:	86 23       	and	r24, r22
     a4e:	08 95       	ret

00000a50 <_ZN11DigiPortRaw13read_blockingEh>:
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	7c 01       	movw	r14, r24
     a5c:	d6 2f       	mov	r29, r22
     a5e:	1f b7       	in	r17, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	d7 01       	movw	r26, r14
     a64:	14 96       	adiw	r26, 0x04	; 4
     a66:	6c 91       	ld	r22, X
     a68:	14 97       	sbiw	r26, 0x04	; 4
     a6a:	60 95       	com	r22
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	00 84       	ldd	r0, Z+8	; 0x08
     a72:	f1 85       	ldd	r31, Z+9	; 0x09
     a74:	e0 2d       	mov	r30, r0
     a76:	c7 01       	movw	r24, r14
     a78:	19 95       	eicall
     a7a:	c8 2f       	mov	r28, r24
     a7c:	80 95       	com	r24
     a7e:	8d 23       	and	r24, r29
     a80:	09 f4       	brne	.+2      	; 0xa84 <_ZN11DigiPortRaw13read_blockingEh+0x34>
     a82:	d2 d3       	rcall	.+1956   	; 0x1228 <_Z5yieldv>
     a84:	1f bf       	out	0x3f, r17	; 63
     a86:	8c 2f       	mov	r24, r28
     a88:	8d 23       	and	r24, r29
     a8a:	49 f3       	breq	.-46     	; 0xa5e <_ZN11DigiPortRaw13read_blockingEh+0xe>
     a8c:	8c 2f       	mov	r24, r28
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <_ZN11DigiPortRawC1Ehhh>:
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	8c 01       	movw	r16, r24
     aa4:	86 2f       	mov	r24, r22
     aa6:	d4 2f       	mov	r29, r20
     aa8:	c2 2f       	mov	r28, r18
     aaa:	27 e3       	ldi	r18, 0x37	; 55
     aac:	32 e0       	ldi	r19, 0x02	; 2
     aae:	d8 01       	movw	r26, r16
     ab0:	2d 93       	st	X+, r18
     ab2:	3c 93       	st	X, r19
     ab4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_Z22port_handle_to_addressh>
     ab8:	f8 01       	movw	r30, r16
     aba:	93 83       	std	Z+3, r25	; 0x03
     abc:	82 83       	std	Z+2, r24	; 0x02
     abe:	d4 83       	std	Z+4, r29	; 0x04
     ac0:	c5 83       	std	Z+5, r28	; 0x05
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	49 f0       	breq	.+18     	; 0xad8 <_ZN11DigiPortRawC1Ehhh+0x3e>
     ac6:	dc 01       	movw	r26, r24
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	dc 93       	st	X, r29
     acc:	02 80       	ldd	r0, Z+2	; 0x02
     ace:	f3 81       	ldd	r31, Z+3	; 0x03
     ad0:	e0 2d       	mov	r30, r0
     ad2:	cd 2b       	or	r28, r29
     ad4:	c0 95       	com	r28
     ad6:	c2 83       	std	Z+2, r28	; 0x02
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	08 95       	ret

00000ae2 <__vector_9>:
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	0b b6       	in	r0, 0x3b	; 59
     aee:	0f 92       	push	r0
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
     b08:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <dp_obj>
     b0c:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <dp_obj+0x1>
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	39 f0       	breq	.+14     	; 0xb22 <__vector_9+0x40>
     b14:	dc 01       	movw	r26, r24
     b16:	ed 91       	ld	r30, X+
     b18:	fc 91       	ld	r31, X
     b1a:	04 84       	ldd	r0, Z+12	; 0x0c
     b1c:	f5 85       	ldd	r31, Z+13	; 0x0d
     b1e:	e0 2d       	mov	r30, r0
     b20:	19 95       	eicall
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	bf 91       	pop	r27
     b28:	af 91       	pop	r26
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	7f 91       	pop	r23
     b30:	6f 91       	pop	r22
     b32:	5f 91       	pop	r21
     b34:	4f 91       	pop	r20
     b36:	3f 91       	pop	r19
     b38:	2f 91       	pop	r18
     b3a:	0f 90       	pop	r0
     b3c:	0b be       	out	0x3b, r0	; 59
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <__vector_10>:
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	0b b6       	in	r0, 0x3b	; 59
     b54:	0f 92       	push	r0
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
     b6e:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <dp_obj+0x4>
     b72:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <dp_obj+0x5>
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	39 f0       	breq	.+14     	; 0xb88 <__vector_10+0x40>
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	04 84       	ldd	r0, Z+12	; 0x0c
     b82:	f5 85       	ldd	r31, Z+13	; 0x0d
     b84:	e0 2d       	mov	r30, r0
     b86:	19 95       	eicall
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0b be       	out	0x3b, r0	; 59
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <__vector_11>:
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	0b b6       	in	r0, 0x3b	; 59
     bba:	0f 92       	push	r0
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	4f 93       	push	r20
     bc2:	5f 93       	push	r21
     bc4:	6f 93       	push	r22
     bc6:	7f 93       	push	r23
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	af 93       	push	r26
     bce:	bf 93       	push	r27
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
     bd4:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <dp_obj+0x2>
     bd8:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <dp_obj+0x3>
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	39 f0       	breq	.+14     	; 0xbee <__vector_11+0x40>
     be0:	dc 01       	movw	r26, r24
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	04 84       	ldd	r0, Z+12	; 0x0c
     be8:	f5 85       	ldd	r31, Z+13	; 0x0d
     bea:	e0 2d       	mov	r30, r0
     bec:	19 95       	eicall
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <_ZN3LCD10wait_readyEv>:
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	fc 01       	movw	r30, r24
     c1a:	6f b7       	in	r22, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	a2 81       	ldd	r26, Z+2	; 0x02
     c20:	b3 81       	ldd	r27, Z+3	; 0x03
     c22:	1c 92       	st	X, r1
     c24:	a2 81       	ldd	r26, Z+2	; 0x02
     c26:	b3 81       	ldd	r27, Z+3	; 0x03
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	80 ef       	ldi	r24, 0xF0	; 240
     c2c:	8c 93       	st	X, r24
     c2e:	a2 81       	ldd	r26, Z+2	; 0x02
     c30:	b3 81       	ldd	r27, Z+3	; 0x03
     c32:	8c 91       	ld	r24, X
     c34:	80 62       	ori	r24, 0x20	; 32
     c36:	8c 93       	st	X, r24
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a2 81       	ldd	r26, Z+2	; 0x02
     c3e:	b3 81       	ldd	r27, Z+3	; 0x03
     c40:	4c 91       	ld	r20, X
     c42:	9c 01       	movw	r18, r24
     c44:	01 84       	ldd	r0, Z+9	; 0x09
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <_ZN3LCD10wait_readyEv+0x38>
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <_ZN3LCD10wait_readyEv+0x34>
     c50:	24 27       	eor	r18, r20
     c52:	2c 93       	st	X, r18
     c54:	25 e0       	ldi	r18, 0x05	; 5
     c56:	2a 95       	dec	r18
     c58:	f1 f7       	brne	.-4      	; 0xc56 <_ZN3LCD10wait_readyEv+0x42>
     c5a:	00 00       	nop
     c5c:	a2 81       	ldd	r26, Z+2	; 0x02
     c5e:	b3 81       	ldd	r27, Z+3	; 0x03
     c60:	ed 01       	movw	r28, r26
     c62:	22 97       	sbiw	r28, 0x02	; 2
     c64:	28 81       	ld	r18, Y
     c66:	22 95       	swap	r18
     c68:	20 7f       	andi	r18, 0xF0	; 240
     c6a:	3c 91       	ld	r19, X
     c6c:	ac 01       	movw	r20, r24
     c6e:	01 84       	ldd	r0, Z+9	; 0x09
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <_ZN3LCD10wait_readyEv+0x62>
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <_ZN3LCD10wait_readyEv+0x5e>
     c7a:	43 27       	eor	r20, r19
     c7c:	4c 93       	st	X, r20
     c7e:	3a e0       	ldi	r19, 0x0A	; 10
     c80:	3a 95       	dec	r19
     c82:	f1 f7       	brne	.-4      	; 0xc80 <_ZN3LCD10wait_readyEv+0x6c>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <_ZN3LCD10wait_readyEv+0x72>
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	3c 91       	ld	r19, X
     c8c:	ac 01       	movw	r20, r24
     c8e:	01 84       	ldd	r0, Z+9	; 0x09
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <_ZN3LCD10wait_readyEv+0x82>
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <_ZN3LCD10wait_readyEv+0x7e>
     c9a:	43 27       	eor	r20, r19
     c9c:	4c 93       	st	X, r20
     c9e:	35 e0       	ldi	r19, 0x05	; 5
     ca0:	3a 95       	dec	r19
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <_ZN3LCD10wait_readyEv+0x8c>
     ca4:	00 00       	nop
     ca6:	a2 81       	ldd	r26, Z+2	; 0x02
     ca8:	b3 81       	ldd	r27, Z+3	; 0x03
     caa:	ed 01       	movw	r28, r26
     cac:	22 97       	sbiw	r28, 0x02	; 2
     cae:	38 81       	ld	r19, Y
     cb0:	3c 91       	ld	r19, X
     cb2:	ac 01       	movw	r20, r24
     cb4:	01 84       	ldd	r0, Z+9	; 0x09
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <_ZN3LCD10wait_readyEv+0xa8>
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <_ZN3LCD10wait_readyEv+0xa4>
     cc0:	43 27       	eor	r20, r19
     cc2:	4c 93       	st	X, r20
     cc4:	22 23       	and	r18, r18
     cc6:	0c f4       	brge	.+2      	; 0xcca <_ZN3LCD10wait_readyEv+0xb6>
     cc8:	b9 cf       	rjmp	.-142    	; 0xc3c <_ZN3LCD10wait_readyEv+0x28>
     cca:	a2 81       	ldd	r26, Z+2	; 0x02
     ccc:	b3 81       	ldd	r27, Z+3	; 0x03
     cce:	8c 91       	ld	r24, X
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	8c 93       	st	X, r24
     cd4:	02 80       	ldd	r0, Z+2	; 0x02
     cd6:	f3 81       	ldd	r31, Z+3	; 0x03
     cd8:	e0 2d       	mov	r30, r0
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	80 83       	st	Z, r24
     ce0:	6f bf       	out	0x3f, r22	; 63
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <_ZN3LCD6enableEv>:
     ce8:	fc 01       	movw	r30, r24
     cea:	4f b7       	in	r20, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	a2 81       	ldd	r26, Z+2	; 0x02
     cf0:	b3 81       	ldd	r27, Z+3	; 0x03
     cf2:	5c 91       	ld	r21, X
     cf4:	21 e0       	ldi	r18, 0x01	; 1
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c9 01       	movw	r24, r18
     cfa:	01 84       	ldd	r0, Z+9	; 0x09
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <_ZN3LCD6enableEv+0x1a>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <_ZN3LCD6enableEv+0x16>
     d06:	85 27       	eor	r24, r21
     d08:	8c 93       	st	X, r24
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	8a 95       	dec	r24
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <_ZN3LCD6enableEv+0x24>
     d10:	00 00       	nop
     d12:	a2 81       	ldd	r26, Z+2	; 0x02
     d14:	b3 81       	ldd	r27, Z+3	; 0x03
     d16:	8c 91       	ld	r24, X
     d18:	01 84       	ldd	r0, Z+9	; 0x09
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <_ZN3LCD6enableEv+0x38>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <_ZN3LCD6enableEv+0x34>
     d24:	28 27       	eor	r18, r24
     d26:	2c 93       	st	X, r18
     d28:	4f bf       	out	0x3f, r20	; 63
     d2a:	08 95       	ret

00000d2c <_ZN3LCD7commandEh>:
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	06 2f       	mov	r16, r22
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	89 30       	cpi	r24, 0x09	; 9
     d40:	11 f0       	breq	.+4      	; 0xd46 <_ZN3LCD7commandEh+0x1a>
     d42:	ce 01       	movw	r24, r28
     d44:	67 df       	rcall	.-306    	; 0xc14 <_ZN3LCD10wait_readyEv>
     d46:	1f b7       	in	r17, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	e0 2e       	mov	r14, r16
     d4c:	f1 2c       	mov	r15, r1
     d4e:	f5 94       	asr	r15
     d50:	e7 94       	ror	r14
     d52:	f5 94       	asr	r15
     d54:	e7 94       	ror	r14
     d56:	f5 94       	asr	r15
     d58:	e7 94       	ror	r14
     d5a:	f5 94       	asr	r15
     d5c:	e7 94       	ror	r14
     d5e:	ea 81       	ldd	r30, Y+2	; 0x02
     d60:	fb 81       	ldd	r31, Y+3	; 0x03
     d62:	e0 82       	st	Z, r14
     d64:	ce 01       	movw	r24, r28
     d66:	c0 df       	rcall	.-128    	; 0xce8 <_ZN3LCD6enableEv>
     d68:	0f 70       	andi	r16, 0x0F	; 15
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	00 83       	st	Z, r16
     d70:	ce 01       	movw	r24, r28
     d72:	ba df       	rcall	.-140    	; 0xce8 <_ZN3LCD6enableEv>
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	10 82       	st	Z, r1
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	89 30       	cpi	r24, 0x09	; 9
     d7e:	31 f5       	brne	.+76     	; 0xdcc <_ZN3LCD7commandEh+0xa0>
     d80:	87 ec       	ldi	r24, 0xC7	; 199
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <_ZN3LCD7commandEh+0x58>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <_ZN3LCD7commandEh+0x5e>
     d8a:	00 00       	nop
     d8c:	1f c0       	rjmp	.+62     	; 0xdcc <_ZN3LCD7commandEh+0xa0>
     d8e:	19 85       	ldd	r17, Y+9	; 0x09
     d90:	14 30       	cpi	r17, 0x04	; 4
     d92:	11 f0       	breq	.+4      	; 0xd98 <_ZN3LCD7commandEh+0x6c>
     d94:	84 e0       	ldi	r24, 0x04	; 4
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <_ZN3LCD7commandEh+0x6e>
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	89 87       	std	Y+9, r24	; 0x09
     d9c:	ff b6       	in	r15, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	ea 81       	ldd	r30, Y+2	; 0x02
     da2:	fb 81       	ldd	r31, Y+3	; 0x03
     da4:	e0 82       	st	Z, r14
     da6:	ce 01       	movw	r24, r28
     da8:	9f df       	rcall	.-194    	; 0xce8 <_ZN3LCD6enableEv>
     daa:	ea 81       	ldd	r30, Y+2	; 0x02
     dac:	fb 81       	ldd	r31, Y+3	; 0x03
     dae:	00 83       	st	Z, r16
     db0:	ce 01       	movw	r24, r28
     db2:	9a df       	rcall	.-204    	; 0xce8 <_ZN3LCD6enableEv>
     db4:	ea 81       	ldd	r30, Y+2	; 0x02
     db6:	fb 81       	ldd	r31, Y+3	; 0x03
     db8:	10 82       	st	Z, r1
     dba:	19 87       	std	Y+9, r17	; 0x09
     dbc:	87 ec       	ldi	r24, 0xC7	; 199
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <_ZN3LCD7commandEh+0x94>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <_ZN3LCD7commandEh+0x9a>
     dc6:	00 00       	nop
     dc8:	ff be       	out	0x3f, r15	; 63
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <_ZN3LCD7commandEh+0xa8>
     dcc:	1f bf       	out	0x3f, r17	; 63
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	89 30       	cpi	r24, 0x09	; 9
     dd2:	e9 f2       	breq	.-70     	; 0xd8e <_ZN3LCD7commandEh+0x62>
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	08 95       	ret

00000de2 <_ZN3LCD7set_posEhh>:
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	fc 01       	movw	r30, r24
     de8:	a5 81       	ldd	r26, Z+5	; 0x05
     dea:	b6 81       	ldd	r27, Z+6	; 0x06
     dec:	8c 91       	ld	r24, X
     dee:	68 17       	cp	r22, r24
     df0:	f0 f4       	brcc	.+60     	; 0xe2e <_ZN3LCD7set_posEhh+0x4c>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	8c 91       	ld	r24, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	48 17       	cp	r20, r24
     dfa:	d8 f4       	brcc	.+54     	; 0xe32 <_ZN3LCD7set_posEhh+0x50>
     dfc:	40 87       	std	Z+8, r20	; 0x08
     dfe:	67 83       	std	Z+7, r22	; 0x07
     e00:	ed 01       	movw	r28, r26
     e02:	c6 0f       	add	r28, r22
     e04:	d1 1d       	adc	r29, r1
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	48 0f       	add	r20, r24
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	89 30       	cpi	r24, 0x09	; 9
     e0e:	39 f4       	brne	.+14     	; 0xe1e <_ZN3LCD7set_posEhh+0x3c>
     e10:	8c 91       	ld	r24, X
     e12:	86 95       	lsr	r24
     e14:	68 17       	cp	r22, r24
     e16:	18 f0       	brcs	.+6      	; 0xe1e <_ZN3LCD7set_posEhh+0x3c>
     e18:	87 e0       	ldi	r24, 0x07	; 7
     e1a:	81 87       	std	Z+9, r24	; 0x09
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <_ZN3LCD7set_posEhh+0x40>
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	81 87       	std	Z+9, r24	; 0x09
     e22:	cf 01       	movw	r24, r30
     e24:	64 2f       	mov	r22, r20
     e26:	60 68       	ori	r22, 0x80	; 128
     e28:	81 df       	rcall	.-254    	; 0xd2c <_ZN3LCD7commandEh>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <_ZN3LCD7set_posEhh+0x52>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <_ZN3LCD7set_posEhh+0x52>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <_ZN3LCD14advance_cursorEv>:
     e3a:	fc 01       	movw	r30, r24
     e3c:	90 85       	ldd	r25, Z+8	; 0x08
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 0f       	add	r24, r25
     e42:	80 87       	std	Z+8, r24	; 0x08
     e44:	a5 81       	ldd	r26, Z+5	; 0x05
     e46:	b6 81       	ldd	r27, Z+6	; 0x06
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	2c 91       	ld	r18, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	82 17       	cp	r24, r18
     e50:	88 f0       	brcs	.+34     	; 0xe74 <_ZN3LCD14advance_cursorEv+0x3a>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	88 23       	and	r24, r24
     e56:	49 f0       	breq	.+18     	; 0xe6a <_ZN3LCD14advance_cursorEv+0x30>
     e58:	10 86       	std	Z+8, r1	; 0x08
     e5a:	87 81       	ldd	r24, Z+7	; 0x07
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	87 83       	std	Z+7, r24	; 0x07
     e60:	9c 91       	ld	r25, X
     e62:	89 17       	cp	r24, r25
     e64:	18 f0       	brcs	.+6      	; 0xe6c <_ZN3LCD14advance_cursorEv+0x32>
     e66:	17 82       	std	Z+7, r1	; 0x07
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <_ZN3LCD14advance_cursorEv+0x32>
     e6a:	90 87       	std	Z+8, r25	; 0x08
     e6c:	40 85       	ldd	r20, Z+8	; 0x08
     e6e:	67 81       	ldd	r22, Z+7	; 0x07
     e70:	cf 01       	movw	r24, r30
     e72:	b7 cf       	rjmp	.-146    	; 0xde2 <_ZN3LCD7set_posEhh>
     e74:	08 95       	ret

00000e76 <_ZN3LCD4initEh>:
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	16 2f       	mov	r17, r22
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	81 ee       	ldi	r24, 0xE1	; 225
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <_ZN3LCD4initEh+0x10>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <_ZN3LCD4initEh+0x1a>
     e90:	00 00       	nop
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	80 83       	st	Z, r24
     e9a:	ce 01       	movw	r24, r28
     e9c:	25 df       	rcall	.-438    	; 0xce8 <_ZN3LCD6enableEv>
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	9e e4       	ldi	r25, 0x4E	; 78
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <_ZN3LCD4initEh+0x2c>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <_ZN3LCD4initEh+0x32>
     ea8:	00 00       	nop
     eaa:	ce 01       	movw	r24, r28
     eac:	1d df       	rcall	.-454    	; 0xce8 <_ZN3LCD6enableEv>
     eae:	8f e1       	ldi	r24, 0x1F	; 31
     eb0:	9e e4       	ldi	r25, 0x4E	; 78
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <_ZN3LCD4initEh+0x3c>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <_ZN3LCD4initEh+0x42>
     eb8:	00 00       	nop
     eba:	ce 01       	movw	r24, r28
     ebc:	15 df       	rcall	.-470    	; 0xce8 <_ZN3LCD6enableEv>
     ebe:	8f e1       	ldi	r24, 0x1F	; 31
     ec0:	9e e4       	ldi	r25, 0x4E	; 78
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <_ZN3LCD4initEh+0x4c>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <_ZN3LCD4initEh+0x52>
     ec8:	00 00       	nop
     eca:	ea 81       	ldd	r30, Y+2	; 0x02
     ecc:	fb 81       	ldd	r31, Y+3	; 0x03
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	80 83       	st	Z, r24
     ed2:	ce 01       	movw	r24, r28
     ed4:	09 df       	rcall	.-494    	; 0xce8 <_ZN3LCD6enableEv>
     ed6:	8f e1       	ldi	r24, 0x1F	; 31
     ed8:	9e e4       	ldi	r25, 0x4E	; 78
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <_ZN3LCD4initEh+0x64>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <_ZN3LCD4initEh+0x6a>
     ee0:	00 00       	nop
     ee2:	61 2f       	mov	r22, r17
     ee4:	ce 01       	movw	r24, r28
     ee6:	22 df       	rcall	.-444    	; 0xd2c <_ZN3LCD7commandEh>
     ee8:	ed 81       	ldd	r30, Y+5	; 0x05
     eea:	fe 81       	ldd	r31, Y+6	; 0x06
     eec:	80 81       	ld	r24, Z
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	21 f4       	brne	.+8      	; 0xefa <_ZN3LCD4initEh+0x84>
     ef2:	60 e2       	ldi	r22, 0x20	; 32
     ef4:	ce 01       	movw	r24, r28
     ef6:	1a df       	rcall	.-460    	; 0xd2c <_ZN3LCD7commandEh>
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <_ZN3LCD4initEh+0x8a>
     efa:	68 e2       	ldi	r22, 0x28	; 40
     efc:	ce 01       	movw	r24, r28
     efe:	16 df       	rcall	.-468    	; 0xd2c <_ZN3LCD7commandEh>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	ce 01       	movw	r24, r28
     f04:	13 df       	rcall	.-474    	; 0xd2c <_ZN3LCD7commandEh>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	89 30       	cpi	r24, 0x09	; 9
     f0a:	31 f4       	brne	.+12     	; 0xf18 <_ZN3LCD4initEh+0xa2>
     f0c:	8f e1       	ldi	r24, 0x1F	; 31
     f0e:	9e e4       	ldi	r25, 0x4E	; 78
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <_ZN3LCD4initEh+0x9a>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <_ZN3LCD4initEh+0xa0>
     f16:	00 00       	nop
     f18:	66 e0       	ldi	r22, 0x06	; 6
     f1a:	ce 01       	movw	r24, r28
     f1c:	07 df       	rcall	.-498    	; 0xd2c <_ZN3LCD7commandEh>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	89 30       	cpi	r24, 0x09	; 9
     f22:	09 f0       	breq	.+2      	; 0xf26 <_ZN3LCD4initEh+0xb0>
     f24:	3e c0       	rjmp	.+124    	; 0xfa2 <_ZN3LCD4initEh+0x12c>
     f26:	87 e0       	ldi	r24, 0x07	; 7
     f28:	89 87       	std	Y+9, r24	; 0x09
     f2a:	ea 81       	ldd	r30, Y+2	; 0x02
     f2c:	fb 81       	ldd	r31, Y+3	; 0x03
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	80 83       	st	Z, r24
     f32:	ce 01       	movw	r24, r28
     f34:	d9 de       	rcall	.-590    	; 0xce8 <_ZN3LCD6enableEv>
     f36:	8f e1       	ldi	r24, 0x1F	; 31
     f38:	9e e4       	ldi	r25, 0x4E	; 78
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <_ZN3LCD4initEh+0xc4>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <_ZN3LCD4initEh+0xca>
     f40:	00 00       	nop
     f42:	ce 01       	movw	r24, r28
     f44:	d1 de       	rcall	.-606    	; 0xce8 <_ZN3LCD6enableEv>
     f46:	8f e1       	ldi	r24, 0x1F	; 31
     f48:	9e e4       	ldi	r25, 0x4E	; 78
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <_ZN3LCD4initEh+0xd4>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <_ZN3LCD4initEh+0xda>
     f50:	00 00       	nop
     f52:	ce 01       	movw	r24, r28
     f54:	c9 de       	rcall	.-622    	; 0xce8 <_ZN3LCD6enableEv>
     f56:	8f e1       	ldi	r24, 0x1F	; 31
     f58:	9e e4       	ldi	r25, 0x4E	; 78
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <_ZN3LCD4initEh+0xe4>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <_ZN3LCD4initEh+0xea>
     f60:	00 00       	nop
     f62:	ea 81       	ldd	r30, Y+2	; 0x02
     f64:	fb 81       	ldd	r31, Y+3	; 0x03
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	80 83       	st	Z, r24
     f6a:	ce 01       	movw	r24, r28
     f6c:	bd de       	rcall	.-646    	; 0xce8 <_ZN3LCD6enableEv>
     f6e:	8f e1       	ldi	r24, 0x1F	; 31
     f70:	9e e4       	ldi	r25, 0x4E	; 78
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <_ZN3LCD4initEh+0xfc>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <_ZN3LCD4initEh+0x102>
     f78:	00 00       	nop
     f7a:	61 2f       	mov	r22, r17
     f7c:	ce 01       	movw	r24, r28
     f7e:	d6 de       	rcall	.-596    	; 0xd2c <_ZN3LCD7commandEh>
     f80:	68 e2       	ldi	r22, 0x28	; 40
     f82:	ce 01       	movw	r24, r28
     f84:	d3 de       	rcall	.-602    	; 0xd2c <_ZN3LCD7commandEh>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	ce 01       	movw	r24, r28
     f8a:	d0 de       	rcall	.-608    	; 0xd2c <_ZN3LCD7commandEh>
     f8c:	8f e1       	ldi	r24, 0x1F	; 31
     f8e:	9e e4       	ldi	r25, 0x4E	; 78
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <_ZN3LCD4initEh+0x11a>
     f94:	00 c0       	rjmp	.+0      	; 0xf96 <_ZN3LCD4initEh+0x120>
     f96:	00 00       	nop
     f98:	66 e0       	ldi	r22, 0x06	; 6
     f9a:	ce 01       	movw	r24, r28
     f9c:	c7 de       	rcall	.-626    	; 0xd2c <_ZN3LCD7commandEh>
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	89 87       	std	Y+9, r24	; 0x09
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <_ZN3LCDC1Eh10LCD_Type_th>:
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
     fb4:	86 2f       	mov	r24, r22
     fb6:	04 2f       	mov	r16, r20
     fb8:	12 2f       	mov	r17, r18
     fba:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_Z22port_handle_to_addressh>
     fbe:	9c 01       	movw	r18, r24
     fc0:	2e 5f       	subi	r18, 0xFE	; 254
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	3b 83       	std	Y+3, r19	; 0x03
     fc6:	2a 83       	std	Y+2, r18	; 0x02
     fc8:	24 e0       	ldi	r18, 0x04	; 4
     fca:	29 87       	std	Y+9, r18	; 0x09
     fcc:	0c 83       	std	Y+4, r16	; 0x04
     fce:	40 2f       	mov	r20, r16
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	9a 01       	movw	r18, r20
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	42 0f       	add	r20, r18
     fda:	53 1f       	adc	r21, r19
     fdc:	44 0f       	add	r20, r20
     fde:	55 1f       	adc	r21, r21
     fe0:	4d 5b       	subi	r20, 0xBD	; 189
     fe2:	5d 4f       	sbci	r21, 0xFD	; 253
     fe4:	5e 83       	std	Y+6, r21	; 0x06
     fe6:	4d 83       	std	Y+5, r20	; 0x05
     fe8:	18 86       	std	Y+8, r1	; 0x08
     fea:	1f 82       	std	Y+7, r1	; 0x07
     fec:	21 2f       	mov	r18, r17
     fee:	22 1f       	adc	r18, r18
     ff0:	22 27       	eor	r18, r18
     ff2:	22 1f       	adc	r18, r18
     ff4:	29 83       	std	Y+1, r18	; 0x01
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	fc 01       	movw	r30, r24
     ffa:	21 83       	std	Z+1, r18	; 0x01
     ffc:	61 2f       	mov	r22, r17
     ffe:	6f 77       	andi	r22, 0x7F	; 127
    1000:	68 83       	st	Y, r22
    1002:	ce 01       	movw	r24, r28
    1004:	38 df       	rcall	.-400    	; 0xe76 <_ZN3LCD4initEh>
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <_ZN3LCD10write_charEc>:
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    101a:	16 2f       	mov	r17, r22
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	89 30       	cpi	r24, 0x09	; 9
    1020:	11 f0       	breq	.+4      	; 0x1026 <_ZN3LCD10write_charEc+0x16>
    1022:	ce 01       	movw	r24, r28
    1024:	f7 dd       	rcall	.-1042   	; 0xc14 <_ZN3LCD10wait_readyEv>
    1026:	0f b7       	in	r16, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	81 2f       	mov	r24, r17
    102c:	82 95       	swap	r24
    102e:	8f 70       	andi	r24, 0x0F	; 15
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	ea 81       	ldd	r30, Y+2	; 0x02
    1034:	fb 81       	ldd	r31, Y+3	; 0x03
    1036:	80 83       	st	Z, r24
    1038:	ce 01       	movw	r24, r28
    103a:	56 de       	rcall	.-852    	; 0xce8 <_ZN3LCD6enableEv>
    103c:	1f 70       	andi	r17, 0x0F	; 15
    103e:	10 64       	ori	r17, 0x40	; 64
    1040:	ea 81       	ldd	r30, Y+2	; 0x02
    1042:	fb 81       	ldd	r31, Y+3	; 0x03
    1044:	10 83       	st	Z, r17
    1046:	ce 01       	movw	r24, r28
    1048:	4f de       	rcall	.-866    	; 0xce8 <_ZN3LCD6enableEv>
    104a:	ea 81       	ldd	r30, Y+2	; 0x02
    104c:	fb 81       	ldd	r31, Y+3	; 0x03
    104e:	10 82       	st	Z, r1
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	89 30       	cpi	r24, 0x09	; 9
    1054:	31 f4       	brne	.+12     	; 0x1062 <_ZN3LCD10write_charEc+0x52>
    1056:	87 ec       	ldi	r24, 0xC7	; 199
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <_ZN3LCD10write_charEc+0x4a>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <_ZN3LCD10write_charEc+0x50>
    1060:	00 00       	nop
    1062:	0f bf       	out	0x3f, r16	; 63
    1064:	ce 01       	movw	r24, r28
    1066:	e9 de       	rcall	.-558    	; 0xe3a <_ZN3LCD14advance_cursorEv>
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <_ZN3LCD5clearEv>:
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	58 de       	rcall	.-848    	; 0xd2c <_ZN3LCD7commandEh>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	89 30       	cpi	r24, 0x09	; 9
    1080:	31 f4       	brne	.+12     	; 0x108e <_ZN3LCD5clearEv+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1082:	8f e1       	ldi	r24, 0x1F	; 31
    1084:	9e e4       	ldi	r25, 0x4E	; 78
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <_ZN3LCD5clearEv+0x14>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <_ZN3LCD5clearEv+0x1a>
    108c:	00 00       	nop
    108e:	18 86       	std	Y+8, r1	; 0x08
    1090:	1f 82       	std	Y+7, r1	; 0x07
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	89 87       	std	Y+9, r24	; 0x09
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <_ZL4idlev>:
    109c:	78 94       	sei
    109e:	83 b7       	in	r24, 0x33	; 51
    10a0:	81 7f       	andi	r24, 0xF1	; 241
    10a2:	83 bf       	out	0x33, r24	; 51
    10a4:	83 b7       	in	r24, 0x33	; 51
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	83 bf       	out	0x33, r24	; 51
    10aa:	88 95       	sleep
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	f4 cf       	rjmp	.-24     	; 0x109c <_ZL4idlev>

000010b4 <_Z11task_insertPFvvE8Priority>:
    10b4:	78 2f       	mov	r23, r24
    10b6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL14active_task_id>
    10ba:	8f 3f       	cpi	r24, 0xFF	; 255
    10bc:	39 f5       	brne	.+78     	; 0x110c <_Z11task_insertPFvvE8Priority+0x58>
    10be:	e1 eb       	ldi	r30, 0xB1	; 177
    10c0:	f6 e0       	ldi	r31, 0x06	; 6
    10c2:	2e ed       	ldi	r18, 0xDE	; 222
    10c4:	3c e1       	ldi	r19, 0x1C	; 28
    10c6:	80 83       	st	Z, r24
    10c8:	e5 5d       	subi	r30, 0xD5	; 213
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	2e 17       	cp	r18, r30
    10ce:	3f 07       	cpc	r19, r31
    10d0:	d1 f7       	brne	.-12     	; 0x10c6 <_Z11task_insertPFvvE8Priority+0x12>
    10d2:	4f b7       	in	r20, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	e6 e8       	ldi	r30, 0x86	; 134
    10d8:	f3 e0       	ldi	r31, 0x03	; 3
    10da:	10 82       	st	Z, r1
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	83 83       	std	Z+3, r24	; 0x03
    10e2:	14 82       	std	Z+4, r1	; 0x04
    10e4:	15 82       	std	Z+5, r1	; 0x05
    10e6:	16 82       	std	Z+6, r1	; 0x06
    10e8:	17 82       	std	Z+7, r1	; 0x07
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	81 83       	std	Z+1, r24	; 0x01
    10ee:	2e e4       	ldi	r18, 0x4E	; 78
    10f0:	38 e0       	ldi	r19, 0x08	; 8
    10f2:	20 93 b0 06 	sts	0x06B0, r18	; 0x8006b0 <_ZL7taskset+0x32a>
    10f6:	30 93 af 06 	sts	0x06AF, r19	; 0x8006af <_ZL7taskset+0x329>
    10fa:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <_ZL7taskset+0x328>
    10fe:	2d e8       	ldi	r18, 0x8D	; 141
    1100:	36 e0       	ldi	r19, 0x06	; 6
    1102:	32 87       	std	Z+10, r19	; 0x0a
    1104:	21 87       	std	Z+9, r18	; 0x09
    1106:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZL14active_task_id>
    110a:	4f bf       	out	0x3f, r20	; 63
    110c:	5f b7       	in	r21, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <_ZL7taskset+0x32b>
    1114:	2f 3f       	cpi	r18, 0xFF	; 255
    1116:	51 f0       	breq	.+20     	; 0x112c <_Z11task_insertPFvvE8Priority+0x78>
    1118:	ec ed       	ldi	r30, 0xDC	; 220
    111a:	f9 e0       	ldi	r31, 0x09	; 9
    111c:	22 e0       	ldi	r18, 0x02	; 2
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	82 2f       	mov	r24, r18
    1122:	d9 01       	movw	r26, r18
    1124:	40 81       	ld	r20, Z
    1126:	4f 3f       	cpi	r20, 0xFF	; 255
    1128:	31 f5       	brne	.+76     	; 0x1176 <_Z11task_insertPFvvE8Priority+0xc2>
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <_Z11task_insertPFvvE8Priority+0x7e>
    112c:	a1 e0       	ldi	r26, 0x01	; 1
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	eb e2       	ldi	r30, 0x2B	; 43
    1134:	f3 e0       	ldi	r31, 0x03	; 3
    1136:	ae 9f       	mul	r26, r30
    1138:	90 01       	movw	r18, r0
    113a:	af 9f       	mul	r26, r31
    113c:	30 0d       	add	r19, r0
    113e:	be 9f       	mul	r27, r30
    1140:	30 0d       	add	r19, r0
    1142:	11 24       	eor	r1, r1
    1144:	f9 01       	movw	r30, r18
    1146:	ea 57       	subi	r30, 0x7A	; 122
    1148:	fc 4f       	sbci	r31, 0xFC	; 252
    114a:	80 83       	st	Z, r24
    114c:	62 83       	std	Z+2, r22	; 0x02
    114e:	63 83       	std	Z+3, r22	; 0x03
    1150:	14 82       	std	Z+4, r1	; 0x04
    1152:	15 82       	std	Z+5, r1	; 0x05
    1154:	16 82       	std	Z+6, r1	; 0x06
    1156:	17 82       	std	Z+7, r1	; 0x07
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	41 83       	std	Z+1, r20	; 0x01
    115c:	df 01       	movw	r26, r30
    115e:	a6 5d       	subi	r26, 0xD6	; 214
    1160:	bc 4f       	sbci	r27, 0xFC	; 252
    1162:	7c 93       	st	X, r23
    1164:	11 97       	sbiw	r26, 0x01	; 1
    1166:	9c 93       	st	X, r25
    1168:	11 97       	sbiw	r26, 0x01	; 1
    116a:	1c 92       	st	X, r1
    116c:	23 57       	subi	r18, 0x73	; 115
    116e:	39 4f       	sbci	r19, 0xF9	; 249
    1170:	32 87       	std	Z+10, r19	; 0x0a
    1172:	21 87       	std	Z+9, r18	; 0x09
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <_Z11task_insertPFvvE8Priority+0xd2>
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	e5 5d       	subi	r30, 0xD5	; 213
    117c:	fc 4f       	sbci	r31, 0xFC	; 252
    117e:	28 30       	cpi	r18, 0x08	; 8
    1180:	31 05       	cpc	r19, r1
    1182:	71 f6       	brne	.-100    	; 0x1120 <_Z11task_insertPFvvE8Priority+0x6c>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	5f bf       	out	0x3f, r21	; 63
    1188:	08 95       	ret

0000118a <_Z8activateh>:
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	98 0f       	add	r25, r24
    118e:	97 30       	cpi	r25, 0x07	; 7
    1190:	f8 f4       	brcc	.+62     	; 0x11d0 <_Z8activateh+0x46>
    1192:	4f b7       	in	r20, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2b e2       	ldi	r18, 0x2B	; 43
    119a:	33 e0       	ldi	r19, 0x03	; 3
    119c:	82 9f       	mul	r24, r18
    119e:	f0 01       	movw	r30, r0
    11a0:	83 9f       	mul	r24, r19
    11a2:	f0 0d       	add	r31, r0
    11a4:	92 9f       	mul	r25, r18
    11a6:	f0 0d       	add	r31, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	ea 57       	subi	r30, 0x7A	; 122
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	20 81       	ld	r18, Z
    11b0:	2f 3f       	cpi	r18, 0xFF	; 255
    11b2:	69 f0       	breq	.+26     	; 0x11ce <_Z8activateh+0x44>
    11b4:	2b e2       	ldi	r18, 0x2B	; 43
    11b6:	33 e0       	ldi	r19, 0x03	; 3
    11b8:	82 9f       	mul	r24, r18
    11ba:	f0 01       	movw	r30, r0
    11bc:	83 9f       	mul	r24, r19
    11be:	f0 0d       	add	r31, r0
    11c0:	92 9f       	mul	r25, r18
    11c2:	f0 0d       	add	r31, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	ea 57       	subi	r30, 0x7A	; 122
    11c8:	fc 4f       	sbci	r31, 0xFC	; 252
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	81 83       	std	Z+1, r24	; 0x01
    11ce:	4f bf       	out	0x3f, r20	; 63
    11d0:	08 95       	ret

000011d2 <_Z9is_activeh>:
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	98 0f       	add	r25, r24
    11d6:	97 30       	cpi	r25, 0x07	; 7
    11d8:	78 f4       	brcc	.+30     	; 0x11f8 <_Z9is_activeh+0x26>
    11da:	2b e2       	ldi	r18, 0x2B	; 43
    11dc:	33 e0       	ldi	r19, 0x03	; 3
    11de:	82 9f       	mul	r24, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	83 9f       	mul	r24, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	ea 57       	subi	r30, 0x7A	; 122
    11ea:	fc 4f       	sbci	r31, 0xFC	; 252
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	92 30       	cpi	r25, 0x02	; 2
    11f2:	19 f4       	brne	.+6      	; 0x11fa <_Z9is_activeh+0x28>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret

000011fc <_Z6kernel14SchedulingTypePFvhE>:
    11fc:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <_ZL10sched_type>
    1200:	70 93 73 03 	sts	0x0373, r23	; 0x800373 <_ZL8exitproc+0x1>
    1204:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <_ZL8exitproc>
    1208:	6f e0       	ldi	r22, 0x0F	; 15
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	85 e7       	ldi	r24, 0x75	; 117
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	0e 94 cf 11 	call	0x239e	; 0x239e <_ZN7OSTimer5startEj>
    1214:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZL14active_task_id>
    1218:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <_ZL7taskset+0x1>
    121c:	78 94       	sei
    121e:	85 e7       	ldi	r24, 0x75	; 117
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7OSTimer13force_timeoutEv>
    1226:	ff cf       	rjmp	.-2      	; 0x1226 <_Z6kernel14SchedulingTypePFvhE+0x2a>

00001228 <_Z5yieldv>:
    1228:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <_ZL10sched_type>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	61 f4       	brne	.+24     	; 0x1248 <_Z5yieldv+0x20>
    1230:	78 94       	sei
    1232:	83 b7       	in	r24, 0x33	; 51
    1234:	81 7f       	andi	r24, 0xF1	; 241
    1236:	83 bf       	out	0x33, r24	; 51
    1238:	83 b7       	in	r24, 0x33	; 51
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	83 bf       	out	0x33, r24	; 51
    123e:	88 95       	sleep
    1240:	83 b7       	in	r24, 0x33	; 51
    1242:	8e 7f       	andi	r24, 0xFE	; 254
    1244:	83 bf       	out	0x33, r24	; 51
    1246:	08 95       	ret
    1248:	85 e7       	ldi	r24, 0x75	; 117
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7OSTimer13force_timeoutEv>
    1250:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <_ZL14active_task_id>
    1254:	2b e2       	ldi	r18, 0x2B	; 43
    1256:	33 e0       	ldi	r19, 0x03	; 3
    1258:	92 9f       	mul	r25, r18
    125a:	f0 01       	movw	r30, r0
    125c:	93 9f       	mul	r25, r19
    125e:	f0 0d       	add	r31, r0
    1260:	11 24       	eor	r1, r1
    1262:	ea 57       	subi	r30, 0x7A	; 122
    1264:	fc 4f       	sbci	r31, 0xFC	; 252
    1266:	44 81       	ldd	r20, Z+4	; 0x04
    1268:	55 81       	ldd	r21, Z+5	; 0x05
    126a:	66 81       	ldd	r22, Z+6	; 0x06
    126c:	77 81       	ldd	r23, Z+7	; 0x07
    126e:	48 0f       	add	r20, r24
    1270:	51 1d       	adc	r21, r1
    1272:	61 1d       	adc	r22, r1
    1274:	71 1d       	adc	r23, r1
    1276:	44 83       	std	Z+4, r20	; 0x04
    1278:	55 83       	std	Z+5, r21	; 0x05
    127a:	66 83       	std	Z+6, r22	; 0x06
    127c:	77 83       	std	Z+7, r23	; 0x07
    127e:	08 95       	ret

00001280 <_Z10deactivateh>:
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	98 0f       	add	r25, r24
    1284:	97 30       	cpi	r25, 0x07	; 7
    1286:	f0 f4       	brcc	.+60     	; 0x12c4 <_Z10deactivateh+0x44>
    1288:	6f b7       	in	r22, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4b e2       	ldi	r20, 0x2B	; 43
    1292:	53 e0       	ldi	r21, 0x03	; 3
    1294:	24 9f       	mul	r18, r20
    1296:	f0 01       	movw	r30, r0
    1298:	25 9f       	mul	r18, r21
    129a:	f0 0d       	add	r31, r0
    129c:	34 9f       	mul	r19, r20
    129e:	f0 0d       	add	r31, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	ea 57       	subi	r30, 0x7A	; 122
    12a4:	fc 4f       	sbci	r31, 0xFC	; 252
    12a6:	90 81       	ld	r25, Z
    12a8:	9f 3f       	cpi	r25, 0xFF	; 255
    12aa:	59 f0       	breq	.+22     	; 0x12c2 <_Z10deactivateh+0x42>
    12ac:	24 9f       	mul	r18, r20
    12ae:	f0 01       	movw	r30, r0
    12b0:	25 9f       	mul	r18, r21
    12b2:	f0 0d       	add	r31, r0
    12b4:	34 9f       	mul	r19, r20
    12b6:	f0 0d       	add	r31, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	ea 57       	subi	r30, 0x7A	; 122
    12bc:	fc 4f       	sbci	r31, 0xFC	; 252
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	6f bf       	out	0x3f, r22	; 63
    12c4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <_ZL14active_task_id>
    12c8:	89 13       	cpse	r24, r25
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <_Z10deactivateh+0x4e>
    12cc:	ad cf       	rjmp	.-166    	; 0x1228 <_Z5yieldv>
    12ce:	08 95       	ret

000012d0 <_Z15current_task_idv>:
    12d0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL14active_task_id>
    12d4:	08 95       	ret

000012d6 <_Z8sem_waith>:
    12d6:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <_ZL17sem_waiting_count>
    12da:	28 30       	cpi	r18, 0x08	; 8
    12dc:	99 f1       	breq	.+102    	; 0x1344 <_Z8sem_waith+0x6e>
    12de:	22 23       	and	r18, r18
    12e0:	29 f0       	breq	.+10     	; 0x12ec <_Z8sem_waith+0x16>
    12e2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    12e6:	89 13       	cpse	r24, r25
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <_Z8sem_waith+0x2a>
    12ea:	08 95       	ret
    12ec:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    12f0:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZL18sem_waiting_oldest>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <_ZL22sem_waiting_free_index>
    12fa:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <_ZL17sem_waiting_count>
    12fe:	08 95       	ret
    1300:	e1 e0       	ldi	r30, 0x01	; 1
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	48 e0       	ldi	r20, 0x08	; 8
    1306:	52 e0       	ldi	r21, 0x02	; 2
    1308:	91 91       	ld	r25, Z+
    130a:	89 17       	cp	r24, r25
    130c:	d9 f0       	breq	.+54     	; 0x1344 <_Z8sem_waith+0x6e>
    130e:	e4 17       	cp	r30, r20
    1310:	f5 07       	cpc	r31, r21
    1312:	d1 f7       	brne	.-12     	; 0x1308 <_Z8sem_waith+0x32>
    1314:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <_ZL22sem_waiting_free_index>
    1318:	e8 30       	cpi	r30, 0x08	; 8
    131a:	48 f0       	brcs	.+18     	; 0x132e <_Z8sem_waith+0x58>
    131c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <_ZL22sem_waiting_free_index>
    1326:	2f 5f       	subi	r18, 0xFF	; 255
    1328:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <_ZL17sem_waiting_count>
    132c:	08 95       	ret
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	9e 0f       	add	r25, r30
    1332:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <_ZL22sem_waiting_free_index>
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	e0 50       	subi	r30, 0x00	; 0
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	80 83       	st	Z, r24
    133e:	2f 5f       	subi	r18, 0xFF	; 255
    1340:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <_ZL17sem_waiting_count>
    1344:	08 95       	ret

00001346 <_Z11sem_waitingv>:
    1346:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <_ZL17sem_waiting_count>
    134a:	99 23       	and	r25, r25
    134c:	a9 f0       	breq	.+42     	; 0x1378 <_Z11sem_waitingv+0x32>
    134e:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <_ZL18sem_waiting_oldest>
    1352:	e2 2f       	mov	r30, r18
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	e0 50       	subi	r30, 0x00	; 0
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	80 81       	ld	r24, Z
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	30 83       	st	Z, r19
    1360:	91 50       	subi	r25, 0x01	; 1
    1362:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <_ZL17sem_waiting_count>
    1366:	2f 5f       	subi	r18, 0xFF	; 255
    1368:	28 30       	cpi	r18, 0x08	; 8
    136a:	18 f4       	brcc	.+6      	; 0x1372 <_Z11sem_waitingv+0x2c>
    136c:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <_ZL18sem_waiting_oldest>
    1370:	08 95       	ret
    1372:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZL18sem_waiting_oldest>
    1376:	08 95       	ret
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	08 95       	ret

0000137c <__vector_23>:
    137c:	ff 93       	push	r31
    137e:	ef 93       	push	r30
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	bf 93       	push	r27
    1386:	af 93       	push	r26
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	7f 93       	push	r23
    138e:	6f 93       	push	r22
    1390:	5f 93       	push	r21
    1392:	4f 93       	push	r20
    1394:	3f 93       	push	r19
    1396:	2f 93       	push	r18
    1398:	1f 93       	push	r17
    139a:	0f 93       	push	r16
    139c:	ff 92       	push	r15
    139e:	ef 92       	push	r14
    13a0:	df 92       	push	r13
    13a2:	cf 92       	push	r12
    13a4:	bf 92       	push	r11
    13a6:	af 92       	push	r10
    13a8:	9f 92       	push	r9
    13aa:	8f 92       	push	r8
    13ac:	7f 92       	push	r7
    13ae:	6f 92       	push	r6
    13b0:	5f 92       	push	r5
    13b2:	4f 92       	push	r4
    13b4:	3f 92       	push	r3
    13b6:	2f 92       	push	r2
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <_ZL14active_task_id>
    13c0:	2c 2f       	mov	r18, r28
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8f b7       	in	r24, 0x3f	; 63
    13c6:	4b e2       	ldi	r20, 0x2B	; 43
    13c8:	53 e0       	ldi	r21, 0x03	; 3
    13ca:	24 9f       	mul	r18, r20
    13cc:	f0 01       	movw	r30, r0
    13ce:	25 9f       	mul	r18, r21
    13d0:	f0 0d       	add	r31, r0
    13d2:	34 9f       	mul	r19, r20
    13d4:	f0 0d       	add	r31, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	ea 57       	subi	r30, 0x7A	; 122
    13da:	fc 4f       	sbci	r31, 0xFC	; 252
    13dc:	80 87       	std	Z+8, r24	; 0x08
    13de:	8d b7       	in	r24, 0x3d	; 61
    13e0:	9e b7       	in	r25, 0x3e	; 62
    13e2:	92 87       	std	Z+10, r25	; 0x0a
    13e4:	81 87       	std	Z+9, r24	; 0x09
    13e6:	84 81       	ldd	r24, Z+4	; 0x04
    13e8:	95 81       	ldd	r25, Z+5	; 0x05
    13ea:	a6 81       	ldd	r26, Z+6	; 0x06
    13ec:	b7 81       	ldd	r27, Z+7	; 0x07
    13ee:	8f 51       	subi	r24, 0x1F	; 31
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	af 4f       	sbci	r26, 0xFF	; 255
    13f4:	bf 4f       	sbci	r27, 0xFF	; 255
    13f6:	84 83       	std	Z+4, r24	; 0x04
    13f8:	95 83       	std	Z+5, r25	; 0x05
    13fa:	a6 83       	std	Z+6, r26	; 0x06
    13fc:	b7 83       	std	Z+7, r27	; 0x07
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	81 11       	cpse	r24, r1
    1402:	0d c0       	rjmp	.+26     	; 0x141e <__vector_23+0xa2>
    1404:	8b e2       	ldi	r24, 0x2B	; 43
    1406:	93 e0       	ldi	r25, 0x03	; 3
    1408:	28 9f       	mul	r18, r24
    140a:	f0 01       	movw	r30, r0
    140c:	29 9f       	mul	r18, r25
    140e:	f0 0d       	add	r31, r0
    1410:	38 9f       	mul	r19, r24
    1412:	f0 0d       	add	r31, r0
    1414:	11 24       	eor	r1, r1
    1416:	ea 57       	subi	r30, 0x7A	; 122
    1418:	fc 4f       	sbci	r31, 0xFC	; 252
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	81 83       	std	Z+1, r24	; 0x01
    141e:	93 df       	rcall	.-218    	; 0x1346 <_Z11sem_waitingv>
    1420:	8f 3f       	cpi	r24, 0xFF	; 255
    1422:	19 f0       	breq	.+6      	; 0x142a <__vector_23+0xae>
    1424:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZL14active_task_id>
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <__vector_23+0x130>
    142a:	8c 2f       	mov	r24, r28
    142c:	4b e2       	ldi	r20, 0x2B	; 43
    142e:	53 e0       	ldi	r21, 0x03	; 3
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	08 f0       	brcs	.+2      	; 0x1438 <__vector_23+0xbc>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	24 9f       	mul	r18, r20
    143e:	f0 01       	movw	r30, r0
    1440:	25 9f       	mul	r18, r21
    1442:	f0 0d       	add	r31, r0
    1444:	34 9f       	mul	r19, r20
    1446:	f0 0d       	add	r31, r0
    1448:	11 24       	eor	r1, r1
    144a:	ea 57       	subi	r30, 0x7A	; 122
    144c:	fc 4f       	sbci	r31, 0xFC	; 252
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	91 30       	cpi	r25, 0x01	; 1
    1452:	41 f5       	brne	.+80     	; 0x14a4 <__vector_23+0x128>
    1454:	24 9f       	mul	r18, r20
    1456:	f0 01       	movw	r30, r0
    1458:	25 9f       	mul	r18, r21
    145a:	f0 0d       	add	r31, r0
    145c:	34 9f       	mul	r19, r20
    145e:	f0 0d       	add	r31, r0
    1460:	11 24       	eor	r1, r1
    1462:	ea 57       	subi	r30, 0x7A	; 122
    1464:	fc 4f       	sbci	r31, 0xFC	; 252
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	99 23       	and	r25, r25
    146a:	61 f0       	breq	.+24     	; 0x1484 <__vector_23+0x108>
    146c:	24 9f       	mul	r18, r20
    146e:	f0 01       	movw	r30, r0
    1470:	25 9f       	mul	r18, r21
    1472:	f0 0d       	add	r31, r0
    1474:	34 9f       	mul	r19, r20
    1476:	f0 0d       	add	r31, r0
    1478:	11 24       	eor	r1, r1
    147a:	ea 57       	subi	r30, 0x7A	; 122
    147c:	fc 4f       	sbci	r31, 0xFC	; 252
    147e:	91 50       	subi	r25, 0x01	; 1
    1480:	93 83       	std	Z+3, r25	; 0x03
    1482:	d6 cf       	rjmp	.-84     	; 0x1430 <__vector_23+0xb4>
    1484:	4b e2       	ldi	r20, 0x2B	; 43
    1486:	53 e0       	ldi	r21, 0x03	; 3
    1488:	24 9f       	mul	r18, r20
    148a:	f0 01       	movw	r30, r0
    148c:	25 9f       	mul	r18, r21
    148e:	f0 0d       	add	r31, r0
    1490:	34 9f       	mul	r19, r20
    1492:	f0 0d       	add	r31, r0
    1494:	11 24       	eor	r1, r1
    1496:	ea 57       	subi	r30, 0x7A	; 122
    1498:	fc 4f       	sbci	r31, 0xFC	; 252
    149a:	92 81       	ldd	r25, Z+2	; 0x02
    149c:	93 83       	std	Z+3, r25	; 0x03
    149e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZL14active_task_id>
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <__vector_23+0x130>
    14a4:	8c 13       	cpse	r24, r28
    14a6:	c4 cf       	rjmp	.-120    	; 0x1430 <__vector_23+0xb4>
    14a8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZL14active_task_id>
    14ac:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZL14active_task_id>
    14b0:	8b e2       	ldi	r24, 0x2B	; 43
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	28 9f       	mul	r18, r24
    14b6:	f0 01       	movw	r30, r0
    14b8:	29 9f       	mul	r18, r25
    14ba:	f0 0d       	add	r31, r0
    14bc:	11 24       	eor	r1, r1
    14be:	ea 57       	subi	r30, 0x7A	; 122
    14c0:	fc 4f       	sbci	r31, 0xFC	; 252
    14c2:	11 82       	std	Z+1, r1	; 0x01
    14c4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c6:	f8 94       	cli
    14c8:	40 91 77 03 	lds	r20, 0x0377	; 0x800377 <_ZL8OS_timer+0x2>
    14cc:	50 91 78 03 	lds	r21, 0x0378	; 0x800378 <_ZL8OS_timer+0x3>
    14d0:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <tc_vect>
    14d4:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <tc_vect+0x1>
    14d8:	42 17       	cp	r20, r18
    14da:	53 07       	cpc	r21, r19
    14dc:	51 f4       	brne	.+20     	; 0x14f2 <__vector_23+0x176>
    14de:	e5 e7       	ldi	r30, 0x75	; 117
    14e0:	f3 e0       	ldi	r31, 0x03	; 3
    14e2:	a4 81       	ldd	r26, Z+4	; 0x04
    14e4:	b5 81       	ldd	r27, Z+5	; 0x05
    14e6:	8c 91       	ld	r24, X
    14e8:	85 60       	ori	r24, 0x05	; 5
    14ea:	8c 93       	st	X, r24
    14ec:	80 89       	ldd	r24, Z+16	; 0x10
    14ee:	86 bd       	out	0x26, r24	; 38
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <__vector_23+0x18a>
    14f2:	e5 e7       	ldi	r30, 0x75	; 117
    14f4:	f3 e0       	ldi	r31, 0x03	; 3
    14f6:	a4 81       	ldd	r26, Z+4	; 0x04
    14f8:	b5 81       	ldd	r27, Z+5	; 0x05
    14fa:	8c 91       	ld	r24, X
    14fc:	87 60       	ori	r24, 0x07	; 7
    14fe:	8c 93       	st	X, r24
    1500:	80 89       	ldd	r24, Z+16	; 0x10
    1502:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1506:	9f bf       	out	0x3f, r25	; 63
    1508:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZL14active_task_id>
    150c:	8b e2       	ldi	r24, 0x2B	; 43
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	28 9f       	mul	r18, r24
    1512:	f0 01       	movw	r30, r0
    1514:	29 9f       	mul	r18, r25
    1516:	f0 0d       	add	r31, r0
    1518:	11 24       	eor	r1, r1
    151a:	ea 57       	subi	r30, 0x7A	; 122
    151c:	fc 4f       	sbci	r31, 0xFC	; 252
    151e:	20 85       	ldd	r18, Z+8	; 0x08
    1520:	2f bf       	out	0x3f, r18	; 63
    1522:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZL14active_task_id>
    1526:	28 9f       	mul	r18, r24
    1528:	f0 01       	movw	r30, r0
    152a:	29 9f       	mul	r18, r25
    152c:	f0 0d       	add	r31, r0
    152e:	11 24       	eor	r1, r1
    1530:	ea 57       	subi	r30, 0x7A	; 122
    1532:	fc 4f       	sbci	r31, 0xFC	; 252
    1534:	81 85       	ldd	r24, Z+9	; 0x09
    1536:	92 85       	ldd	r25, Z+10	; 0x0a
    1538:	9e bf       	out	0x3e, r25	; 62
    153a:	8d bf       	out	0x3d, r24	; 61
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	2f 90       	pop	r2
    1542:	3f 90       	pop	r3
    1544:	4f 90       	pop	r4
    1546:	5f 90       	pop	r5
    1548:	6f 90       	pop	r6
    154a:	7f 90       	pop	r7
    154c:	8f 90       	pop	r8
    154e:	9f 90       	pop	r9
    1550:	af 90       	pop	r10
    1552:	bf 90       	pop	r11
    1554:	cf 90       	pop	r12
    1556:	df 90       	pop	r13
    1558:	ef 90       	pop	r14
    155a:	ff 90       	pop	r15
    155c:	0f 91       	pop	r16
    155e:	1f 91       	pop	r17
    1560:	2f 91       	pop	r18
    1562:	3f 91       	pop	r19
    1564:	4f 91       	pop	r20
    1566:	5f 91       	pop	r21
    1568:	6f 91       	pop	r22
    156a:	7f 91       	pop	r23
    156c:	8f 91       	pop	r24
    156e:	9f 91       	pop	r25
    1570:	af 91       	pop	r26
    1572:	bf 91       	pop	r27
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	ef 91       	pop	r30
    157a:	ff 91       	pop	r31
    157c:	18 95       	reti

0000157e <_GLOBAL__sub_I__Z11task_insertPFvvE8Priority>:
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	85 e7       	ldi	r24, 0x75	; 117
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	bc c6       	rjmp	.+3448   	; 0x22fe <_ZN7OSTimerC1Eh>
    1586:	08 95       	ret

00001588 <_ZN6Timer88notify_AEv>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    158e:	e8 85       	ldd	r30, Y+8	; 0x08
    1590:	f9 85       	ldd	r31, Y+9	; 0x09
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	09 f0       	breq	.+2      	; 0x1598 <_ZN6Timer88notify_AEv+0x10>
    1596:	19 95       	eicall
    1598:	8a 85       	ldd	r24, Y+10	; 0x0a
    159a:	9b 85       	ldd	r25, Y+11	; 0x0b
    159c:	89 2b       	or	r24, r25
    159e:	39 f4       	brne	.+14     	; 0x15ae <_ZN6Timer88notify_AEv+0x26>
    15a0:	e8 81       	ld	r30, Y
    15a2:	f9 81       	ldd	r31, Y+1	; 0x01
    15a4:	01 90       	ld	r0, Z+
    15a6:	f0 81       	ld	r31, Z
    15a8:	e0 2d       	mov	r30, r0
    15aa:	ce 01       	movw	r24, r28
    15ac:	19 95       	eicall
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <_ZN6Timer88notify_BEv>:
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	ec 01       	movw	r28, r24
    15ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    15bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    15be:	30 97       	sbiw	r30, 0x00	; 0
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_ZN6Timer88notify_BEv+0x10>
    15c2:	19 95       	eicall
    15c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c8:	89 2b       	or	r24, r25
    15ca:	39 f4       	brne	.+14     	; 0x15da <_ZN6Timer88notify_BEv+0x26>
    15cc:	e8 81       	ld	r30, Y
    15ce:	f9 81       	ldd	r31, Y+1	; 0x01
    15d0:	01 90       	ld	r0, Z+
    15d2:	f0 81       	ld	r31, Z
    15d4:	e0 2d       	mov	r30, r0
    15d6:	ce 01       	movw	r24, r28
    15d8:	19 95       	eicall
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <_ZN6Timer88notify_CEv>:
    15e0:	08 95       	ret

000015e2 <_ZN6Timer88notify_OEv>:
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
    15e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <_ZN6Timer88notify_OEv+0x10>
    15f0:	19 95       	eicall
    15f2:	e8 81       	ld	r30, Y
    15f4:	f9 81       	ldd	r31, Y+1	; 0x01
    15f6:	01 90       	ld	r0, Z+
    15f8:	f0 81       	ld	r31, Z
    15fa:	e0 2d       	mov	r30, r0
    15fc:	ce 01       	movw	r24, r28
    15fe:	19 95       	eicall
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <_ZN7OSTimer5resetEv>:
    1606:	dc 01       	movw	r26, r24
    1608:	2f b7       	in	r18, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	4d 91       	ld	r20, X+
    1610:	5c 91       	ld	r21, X
    1612:	13 97       	sbiw	r26, 0x03	; 3
    1614:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tc_vect>
    1618:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <tc_vect+0x1>
    161c:	48 17       	cp	r20, r24
    161e:	59 07       	cpc	r21, r25
    1620:	59 f4       	brne	.+22     	; 0x1638 <_ZN7OSTimer5resetEv+0x32>
    1622:	14 96       	adiw	r26, 0x04	; 4
    1624:	ed 91       	ld	r30, X+
    1626:	fc 91       	ld	r31, X
    1628:	15 97       	sbiw	r26, 0x05	; 5
    162a:	80 81       	ld	r24, Z
    162c:	85 60       	ori	r24, 0x05	; 5
    162e:	80 83       	st	Z, r24
    1630:	50 96       	adiw	r26, 0x10	; 16
    1632:	8c 91       	ld	r24, X
    1634:	86 bd       	out	0x26, r24	; 38
    1636:	0b c0       	rjmp	.+22     	; 0x164e <_ZN7OSTimer5resetEv+0x48>
    1638:	14 96       	adiw	r26, 0x04	; 4
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	15 97       	sbiw	r26, 0x05	; 5
    1640:	90 81       	ld	r25, Z
    1642:	97 60       	ori	r25, 0x07	; 7
    1644:	90 83       	st	Z, r25
    1646:	50 96       	adiw	r26, 0x10	; 16
    1648:	8c 91       	ld	r24, X
    164a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    164e:	2f bf       	out	0x3f, r18	; 63
    1650:	08 95       	ret

00001652 <_ZN7Timer168notify_AEv>:
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	e8 85       	ldd	r30, Y+8	; 0x08
    165a:	f9 85       	ldd	r31, Y+9	; 0x09
    165c:	30 97       	sbiw	r30, 0x00	; 0
    165e:	09 f0       	breq	.+2      	; 0x1662 <_ZN7Timer168notify_AEv+0x10>
    1660:	19 95       	eicall
    1662:	8a 85       	ldd	r24, Y+10	; 0x0a
    1664:	9b 85       	ldd	r25, Y+11	; 0x0b
    1666:	89 2b       	or	r24, r25
    1668:	39 f4       	brne	.+14     	; 0x1678 <_ZN7Timer168notify_AEv+0x26>
    166a:	e8 81       	ld	r30, Y
    166c:	f9 81       	ldd	r31, Y+1	; 0x01
    166e:	01 90       	ld	r0, Z+
    1670:	f0 81       	ld	r31, Z
    1672:	e0 2d       	mov	r30, r0
    1674:	ce 01       	movw	r24, r28
    1676:	19 95       	eicall
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <_ZN7Timer168notify_BEv>:
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ec 01       	movw	r28, r24
    1684:	ea 85       	ldd	r30, Y+10	; 0x0a
    1686:	fb 85       	ldd	r31, Y+11	; 0x0b
    1688:	30 97       	sbiw	r30, 0x00	; 0
    168a:	09 f0       	breq	.+2      	; 0x168e <_ZN7Timer168notify_BEv+0x10>
    168c:	19 95       	eicall
    168e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1690:	9d 85       	ldd	r25, Y+13	; 0x0d
    1692:	89 2b       	or	r24, r25
    1694:	39 f4       	brne	.+14     	; 0x16a4 <_ZN7Timer168notify_BEv+0x26>
    1696:	e8 81       	ld	r30, Y
    1698:	f9 81       	ldd	r31, Y+1	; 0x01
    169a:	01 90       	ld	r0, Z+
    169c:	f0 81       	ld	r31, Z
    169e:	e0 2d       	mov	r30, r0
    16a0:	ce 01       	movw	r24, r28
    16a2:	19 95       	eicall
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <_ZN7Timer168notify_CEv>:
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ec 01       	movw	r28, r24
    16b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    16b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	09 f0       	breq	.+2      	; 0x16ba <_ZN7Timer168notify_CEv+0x10>
    16b8:	19 95       	eicall
    16ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    16bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    16be:	89 2b       	or	r24, r25
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <_ZN7Timer168notify_CEv+0x26>
    16c2:	e8 81       	ld	r30, Y
    16c4:	f9 81       	ldd	r31, Y+1	; 0x01
    16c6:	01 90       	ld	r0, Z+
    16c8:	f0 81       	ld	r31, Z
    16ca:	e0 2d       	mov	r30, r0
    16cc:	ce 01       	movw	r24, r28
    16ce:	19 95       	eicall
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_ZN7Timer168notify_OEv>:
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    16dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    16de:	ff 85       	ldd	r31, Y+15	; 0x0f
    16e0:	30 97       	sbiw	r30, 0x00	; 0
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <_ZN7Timer168notify_OEv+0x10>
    16e4:	19 95       	eicall
    16e6:	e8 81       	ld	r30, Y
    16e8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	ce 01       	movw	r24, r28
    16f2:	19 95       	eicall
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <__cxa_pure_virtual>:
    16fa:	ff cf       	rjmp	.-2      	; 0x16fa <__cxa_pure_virtual>

000016fc <__vector_21>:
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	0b b6       	in	r0, 0x3b	; 59
    1708:	0f 92       	push	r0
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
    1722:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <timer_obj>
    1726:	90 91 df 1c 	lds	r25, 0x1CDF	; 0x801cdf <timer_obj+0x1>
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	39 f0       	breq	.+14     	; 0x173c <__vector_21+0x40>
    172e:	dc 01       	movw	r26, r24
    1730:	ed 91       	ld	r30, X+
    1732:	fc 91       	ld	r31, X
    1734:	02 80       	ldd	r0, Z+2	; 0x02
    1736:	f3 81       	ldd	r31, Z+3	; 0x03
    1738:	e0 2d       	mov	r30, r0
    173a:	19 95       	eicall
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0b be       	out	0x3b, r0	; 59
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_22>:
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
    1788:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <timer_obj>
    178c:	90 91 df 1c 	lds	r25, 0x1CDF	; 0x801cdf <timer_obj+0x1>
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	39 f0       	breq	.+14     	; 0x17a2 <__vector_22+0x40>
    1794:	dc 01       	movw	r26, r24
    1796:	ed 91       	ld	r30, X+
    1798:	fc 91       	ld	r31, X
    179a:	04 80       	ldd	r0, Z+4	; 0x04
    179c:	f5 81       	ldd	r31, Z+5	; 0x05
    179e:	e0 2d       	mov	r30, r0
    17a0:	19 95       	eicall
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0b be       	out	0x3b, r0	; 59
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <__vector_13>:
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	0b b6       	in	r0, 0x3b	; 59
    17d4:	0f 92       	push	r0
    17d6:	2f 93       	push	r18
    17d8:	3f 93       	push	r19
    17da:	4f 93       	push	r20
    17dc:	5f 93       	push	r21
    17de:	6f 93       	push	r22
    17e0:	7f 93       	push	r23
    17e2:	8f 93       	push	r24
    17e4:	9f 93       	push	r25
    17e6:	af 93       	push	r26
    17e8:	bf 93       	push	r27
    17ea:	ef 93       	push	r30
    17ec:	ff 93       	push	r31
    17ee:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <timer_obj+0x4>
    17f2:	90 91 e3 1c 	lds	r25, 0x1CE3	; 0x801ce3 <timer_obj+0x5>
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	39 f0       	breq	.+14     	; 0x1808 <__vector_13+0x40>
    17fa:	dc 01       	movw	r26, r24
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	02 80       	ldd	r0, Z+2	; 0x02
    1802:	f3 81       	ldd	r31, Z+3	; 0x03
    1804:	e0 2d       	mov	r30, r0
    1806:	19 95       	eicall
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0b be       	out	0x3b, r0	; 59
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <__vector_14>:
    182e:	1f 92       	push	r1
    1830:	0f 92       	push	r0
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	0f 92       	push	r0
    1836:	11 24       	eor	r1, r1
    1838:	0b b6       	in	r0, 0x3b	; 59
    183a:	0f 92       	push	r0
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <timer_obj+0x4>
    1858:	90 91 e3 1c 	lds	r25, 0x1CE3	; 0x801ce3 <timer_obj+0x5>
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	39 f0       	breq	.+14     	; 0x186e <__vector_14+0x40>
    1860:	dc 01       	movw	r26, r24
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	04 80       	ldd	r0, Z+4	; 0x04
    1868:	f5 81       	ldd	r31, Z+5	; 0x05
    186a:	e0 2d       	mov	r30, r0
    186c:	19 95       	eicall
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0b be       	out	0x3b, r0	; 59
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__vector_17>:
    1894:	1f 92       	push	r1
    1896:	0f 92       	push	r0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	0f 92       	push	r0
    189c:	11 24       	eor	r1, r1
    189e:	0b b6       	in	r0, 0x3b	; 59
    18a0:	0f 92       	push	r0
    18a2:	2f 93       	push	r18
    18a4:	3f 93       	push	r19
    18a6:	4f 93       	push	r20
    18a8:	5f 93       	push	r21
    18aa:	6f 93       	push	r22
    18ac:	7f 93       	push	r23
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
    18b2:	af 93       	push	r26
    18b4:	bf 93       	push	r27
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
    18ba:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <timer_obj+0x2>
    18be:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <timer_obj+0x3>
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <__vector_17+0x40>
    18c6:	dc 01       	movw	r26, r24
    18c8:	ed 91       	ld	r30, X+
    18ca:	fc 91       	ld	r31, X
    18cc:	02 80       	ldd	r0, Z+2	; 0x02
    18ce:	f3 81       	ldd	r31, Z+3	; 0x03
    18d0:	e0 2d       	mov	r30, r0
    18d2:	19 95       	eicall
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	bf 91       	pop	r27
    18da:	af 91       	pop	r26
    18dc:	9f 91       	pop	r25
    18de:	8f 91       	pop	r24
    18e0:	7f 91       	pop	r23
    18e2:	6f 91       	pop	r22
    18e4:	5f 91       	pop	r21
    18e6:	4f 91       	pop	r20
    18e8:	3f 91       	pop	r19
    18ea:	2f 91       	pop	r18
    18ec:	0f 90       	pop	r0
    18ee:	0b be       	out	0x3b, r0	; 59
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <__vector_18>:
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	0b b6       	in	r0, 0x3b	; 59
    1906:	0f 92       	push	r0
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	ef 93       	push	r30
    191e:	ff 93       	push	r31
    1920:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <timer_obj+0x2>
    1924:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <timer_obj+0x3>
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	39 f0       	breq	.+14     	; 0x193a <__vector_18+0x40>
    192c:	dc 01       	movw	r26, r24
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	04 80       	ldd	r0, Z+4	; 0x04
    1934:	f5 81       	ldd	r31, Z+5	; 0x05
    1936:	e0 2d       	mov	r30, r0
    1938:	19 95       	eicall
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	0f 90       	pop	r0
    1954:	0b be       	out	0x3b, r0	; 59
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	0f 90       	pop	r0
    195c:	1f 90       	pop	r1
    195e:	18 95       	reti

00001960 <__vector_19>:
    1960:	1f 92       	push	r1
    1962:	0f 92       	push	r0
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	0f 92       	push	r0
    1968:	11 24       	eor	r1, r1
    196a:	0b b6       	in	r0, 0x3b	; 59
    196c:	0f 92       	push	r0
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <timer_obj+0x2>
    198a:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <timer_obj+0x3>
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	39 f0       	breq	.+14     	; 0x19a0 <__vector_19+0x40>
    1992:	dc 01       	movw	r26, r24
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	06 80       	ldd	r0, Z+6	; 0x06
    199a:	f7 81       	ldd	r31, Z+7	; 0x07
    199c:	e0 2d       	mov	r30, r0
    199e:	19 95       	eicall
    19a0:	ff 91       	pop	r31
    19a2:	ef 91       	pop	r30
    19a4:	bf 91       	pop	r27
    19a6:	af 91       	pop	r26
    19a8:	9f 91       	pop	r25
    19aa:	8f 91       	pop	r24
    19ac:	7f 91       	pop	r23
    19ae:	6f 91       	pop	r22
    19b0:	5f 91       	pop	r21
    19b2:	4f 91       	pop	r20
    19b4:	3f 91       	pop	r19
    19b6:	2f 91       	pop	r18
    19b8:	0f 90       	pop	r0
    19ba:	0b be       	out	0x3b, r0	; 59
    19bc:	0f 90       	pop	r0
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_20>:
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <timer_obj+0x2>
    19f0:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <timer_obj+0x3>
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	39 f0       	breq	.+14     	; 0x1a06 <__vector_20+0x40>
    19f8:	dc 01       	movw	r26, r24
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	00 84       	ldd	r0, Z+8	; 0x08
    1a00:	f1 85       	ldd	r31, Z+9	; 0x09
    1a02:	e0 2d       	mov	r30, r0
    1a04:	19 95       	eicall
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0b be       	out	0x3b, r0	; 59
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_32>:
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	0b b6       	in	r0, 0x3b	; 59
    1a38:	0f 92       	push	r0
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    1a52:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <timer_obj+0x6>
    1a56:	90 91 e5 1c 	lds	r25, 0x1CE5	; 0x801ce5 <timer_obj+0x7>
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	39 f0       	breq	.+14     	; 0x1a6c <__vector_32+0x40>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	02 80       	ldd	r0, Z+2	; 0x02
    1a66:	f3 81       	ldd	r31, Z+3	; 0x03
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	19 95       	eicall
    1a6c:	ff 91       	pop	r31
    1a6e:	ef 91       	pop	r30
    1a70:	bf 91       	pop	r27
    1a72:	af 91       	pop	r26
    1a74:	9f 91       	pop	r25
    1a76:	8f 91       	pop	r24
    1a78:	7f 91       	pop	r23
    1a7a:	6f 91       	pop	r22
    1a7c:	5f 91       	pop	r21
    1a7e:	4f 91       	pop	r20
    1a80:	3f 91       	pop	r19
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0b be       	out	0x3b, r0	; 59
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	0f 90       	pop	r0
    1a8e:	1f 90       	pop	r1
    1a90:	18 95       	reti

00001a92 <__vector_33>:
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	0f 92       	push	r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	0b b6       	in	r0, 0x3b	; 59
    1a9e:	0f 92       	push	r0
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <timer_obj+0x6>
    1abc:	90 91 e5 1c 	lds	r25, 0x1CE5	; 0x801ce5 <timer_obj+0x7>
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <__vector_33+0x40>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	ed 91       	ld	r30, X+
    1ac8:	fc 91       	ld	r31, X
    1aca:	04 80       	ldd	r0, Z+4	; 0x04
    1acc:	f5 81       	ldd	r31, Z+5	; 0x05
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	19 95       	eicall
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0b be       	out	0x3b, r0	; 59
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_34>:
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <timer_obj+0x6>
    1b22:	90 91 e5 1c 	lds	r25, 0x1CE5	; 0x801ce5 <timer_obj+0x7>
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <__vector_34+0x40>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	06 80       	ldd	r0, Z+6	; 0x06
    1b32:	f7 81       	ldd	r31, Z+7	; 0x07
    1b34:	e0 2d       	mov	r30, r0
    1b36:	19 95       	eicall
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	bf 91       	pop	r27
    1b3e:	af 91       	pop	r26
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	7f 91       	pop	r23
    1b46:	6f 91       	pop	r22
    1b48:	5f 91       	pop	r21
    1b4a:	4f 91       	pop	r20
    1b4c:	3f 91       	pop	r19
    1b4e:	2f 91       	pop	r18
    1b50:	0f 90       	pop	r0
    1b52:	0b be       	out	0x3b, r0	; 59
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_35>:
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	0b b6       	in	r0, 0x3b	; 59
    1b6a:	0f 92       	push	r0
    1b6c:	2f 93       	push	r18
    1b6e:	3f 93       	push	r19
    1b70:	4f 93       	push	r20
    1b72:	5f 93       	push	r21
    1b74:	6f 93       	push	r22
    1b76:	7f 93       	push	r23
    1b78:	8f 93       	push	r24
    1b7a:	9f 93       	push	r25
    1b7c:	af 93       	push	r26
    1b7e:	bf 93       	push	r27
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
    1b84:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <timer_obj+0x6>
    1b88:	90 91 e5 1c 	lds	r25, 0x1CE5	; 0x801ce5 <timer_obj+0x7>
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	39 f0       	breq	.+14     	; 0x1b9e <__vector_35+0x40>
    1b90:	dc 01       	movw	r26, r24
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	00 84       	ldd	r0, Z+8	; 0x08
    1b98:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	19 95       	eicall
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0b be       	out	0x3b, r0	; 59
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0
    1bc0:	1f 90       	pop	r1
    1bc2:	18 95       	reti

00001bc4 <__vector_42>:
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	0b b6       	in	r0, 0x3b	; 59
    1bd0:	0f 92       	push	r0
    1bd2:	2f 93       	push	r18
    1bd4:	3f 93       	push	r19
    1bd6:	4f 93       	push	r20
    1bd8:	5f 93       	push	r21
    1bda:	6f 93       	push	r22
    1bdc:	7f 93       	push	r23
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	af 93       	push	r26
    1be4:	bf 93       	push	r27
    1be6:	ef 93       	push	r30
    1be8:	ff 93       	push	r31
    1bea:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <timer_obj+0x8>
    1bee:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <timer_obj+0x9>
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	39 f0       	breq	.+14     	; 0x1c04 <__vector_42+0x40>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	ed 91       	ld	r30, X+
    1bfa:	fc 91       	ld	r31, X
    1bfc:	02 80       	ldd	r0, Z+2	; 0x02
    1bfe:	f3 81       	ldd	r31, Z+3	; 0x03
    1c00:	e0 2d       	mov	r30, r0
    1c02:	19 95       	eicall
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0b be       	out	0x3b, r0	; 59
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_43>:
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	0b b6       	in	r0, 0x3b	; 59
    1c36:	0f 92       	push	r0
    1c38:	2f 93       	push	r18
    1c3a:	3f 93       	push	r19
    1c3c:	4f 93       	push	r20
    1c3e:	5f 93       	push	r21
    1c40:	6f 93       	push	r22
    1c42:	7f 93       	push	r23
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
    1c48:	af 93       	push	r26
    1c4a:	bf 93       	push	r27
    1c4c:	ef 93       	push	r30
    1c4e:	ff 93       	push	r31
    1c50:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <timer_obj+0x8>
    1c54:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <timer_obj+0x9>
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	39 f0       	breq	.+14     	; 0x1c6a <__vector_43+0x40>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	ed 91       	ld	r30, X+
    1c60:	fc 91       	ld	r31, X
    1c62:	04 80       	ldd	r0, Z+4	; 0x04
    1c64:	f5 81       	ldd	r31, Z+5	; 0x05
    1c66:	e0 2d       	mov	r30, r0
    1c68:	19 95       	eicall
    1c6a:	ff 91       	pop	r31
    1c6c:	ef 91       	pop	r30
    1c6e:	bf 91       	pop	r27
    1c70:	af 91       	pop	r26
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	7f 91       	pop	r23
    1c78:	6f 91       	pop	r22
    1c7a:	5f 91       	pop	r21
    1c7c:	4f 91       	pop	r20
    1c7e:	3f 91       	pop	r19
    1c80:	2f 91       	pop	r18
    1c82:	0f 90       	pop	r0
    1c84:	0b be       	out	0x3b, r0	; 59
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti

00001c90 <__vector_44>:
    1c90:	1f 92       	push	r1
    1c92:	0f 92       	push	r0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	0f 92       	push	r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	0b b6       	in	r0, 0x3b	; 59
    1c9c:	0f 92       	push	r0
    1c9e:	2f 93       	push	r18
    1ca0:	3f 93       	push	r19
    1ca2:	4f 93       	push	r20
    1ca4:	5f 93       	push	r21
    1ca6:	6f 93       	push	r22
    1ca8:	7f 93       	push	r23
    1caa:	8f 93       	push	r24
    1cac:	9f 93       	push	r25
    1cae:	af 93       	push	r26
    1cb0:	bf 93       	push	r27
    1cb2:	ef 93       	push	r30
    1cb4:	ff 93       	push	r31
    1cb6:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <timer_obj+0x8>
    1cba:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <timer_obj+0x9>
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <__vector_44+0x40>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	ed 91       	ld	r30, X+
    1cc6:	fc 91       	ld	r31, X
    1cc8:	06 80       	ldd	r0, Z+6	; 0x06
    1cca:	f7 81       	ldd	r31, Z+7	; 0x07
    1ccc:	e0 2d       	mov	r30, r0
    1cce:	19 95       	eicall
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0b be       	out	0x3b, r0	; 59
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_45>:
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
    1d1c:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <timer_obj+0x8>
    1d20:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <timer_obj+0x9>
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	39 f0       	breq	.+14     	; 0x1d36 <__vector_45+0x40>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	ed 91       	ld	r30, X+
    1d2c:	fc 91       	ld	r31, X
    1d2e:	00 84       	ldd	r0, Z+8	; 0x08
    1d30:	f1 85       	ldd	r31, Z+9	; 0x09
    1d32:	e0 2d       	mov	r30, r0
    1d34:	19 95       	eicall
    1d36:	ff 91       	pop	r31
    1d38:	ef 91       	pop	r30
    1d3a:	bf 91       	pop	r27
    1d3c:	af 91       	pop	r26
    1d3e:	9f 91       	pop	r25
    1d40:	8f 91       	pop	r24
    1d42:	7f 91       	pop	r23
    1d44:	6f 91       	pop	r22
    1d46:	5f 91       	pop	r21
    1d48:	4f 91       	pop	r20
    1d4a:	3f 91       	pop	r19
    1d4c:	2f 91       	pop	r18
    1d4e:	0f 90       	pop	r0
    1d50:	0b be       	out	0x3b, r0	; 59
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <__vector_47>:
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	0b b6       	in	r0, 0x3b	; 59
    1d68:	0f 92       	push	r0
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	6f 93       	push	r22
    1d74:	7f 93       	push	r23
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	af 93       	push	r26
    1d7c:	bf 93       	push	r27
    1d7e:	ef 93       	push	r30
    1d80:	ff 93       	push	r31
    1d82:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <timer_obj+0xa>
    1d86:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <timer_obj+0xb>
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <__vector_47+0x40>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	ed 91       	ld	r30, X+
    1d92:	fc 91       	ld	r31, X
    1d94:	02 80       	ldd	r0, Z+2	; 0x02
    1d96:	f3 81       	ldd	r31, Z+3	; 0x03
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	19 95       	eicall
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0b be       	out	0x3b, r0	; 59
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_48>:
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
    1de8:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <timer_obj+0xa>
    1dec:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <timer_obj+0xb>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <__vector_48+0x40>
    1df4:	dc 01       	movw	r26, r24
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	04 80       	ldd	r0, Z+4	; 0x04
    1dfc:	f5 81       	ldd	r31, Z+5	; 0x05
    1dfe:	e0 2d       	mov	r30, r0
    1e00:	19 95       	eicall
    1e02:	ff 91       	pop	r31
    1e04:	ef 91       	pop	r30
    1e06:	bf 91       	pop	r27
    1e08:	af 91       	pop	r26
    1e0a:	9f 91       	pop	r25
    1e0c:	8f 91       	pop	r24
    1e0e:	7f 91       	pop	r23
    1e10:	6f 91       	pop	r22
    1e12:	5f 91       	pop	r21
    1e14:	4f 91       	pop	r20
    1e16:	3f 91       	pop	r19
    1e18:	2f 91       	pop	r18
    1e1a:	0f 90       	pop	r0
    1e1c:	0b be       	out	0x3b, r0	; 59
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f 90       	pop	r0
    1e24:	1f 90       	pop	r1
    1e26:	18 95       	reti

00001e28 <__vector_49>:
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	0b b6       	in	r0, 0x3b	; 59
    1e34:	0f 92       	push	r0
    1e36:	2f 93       	push	r18
    1e38:	3f 93       	push	r19
    1e3a:	4f 93       	push	r20
    1e3c:	5f 93       	push	r21
    1e3e:	6f 93       	push	r22
    1e40:	7f 93       	push	r23
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
    1e4e:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <timer_obj+0xa>
    1e52:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <timer_obj+0xb>
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	39 f0       	breq	.+14     	; 0x1e68 <__vector_49+0x40>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	06 80       	ldd	r0, Z+6	; 0x06
    1e62:	f7 81       	ldd	r31, Z+7	; 0x07
    1e64:	e0 2d       	mov	r30, r0
    1e66:	19 95       	eicall
    1e68:	ff 91       	pop	r31
    1e6a:	ef 91       	pop	r30
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0b be       	out	0x3b, r0	; 59
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <__vector_50>:
    1e8e:	1f 92       	push	r1
    1e90:	0f 92       	push	r0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	0f 92       	push	r0
    1e96:	11 24       	eor	r1, r1
    1e98:	0b b6       	in	r0, 0x3b	; 59
    1e9a:	0f 92       	push	r0
    1e9c:	2f 93       	push	r18
    1e9e:	3f 93       	push	r19
    1ea0:	4f 93       	push	r20
    1ea2:	5f 93       	push	r21
    1ea4:	6f 93       	push	r22
    1ea6:	7f 93       	push	r23
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	af 93       	push	r26
    1eae:	bf 93       	push	r27
    1eb0:	ef 93       	push	r30
    1eb2:	ff 93       	push	r31
    1eb4:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <timer_obj+0xa>
    1eb8:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <timer_obj+0xb>
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <__vector_50+0x40>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	ed 91       	ld	r30, X+
    1ec4:	fc 91       	ld	r31, X
    1ec6:	00 84       	ldd	r0, Z+8	; 0x08
    1ec8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eca:	e0 2d       	mov	r30, r0
    1ecc:	19 95       	eicall
    1ece:	ff 91       	pop	r31
    1ed0:	ef 91       	pop	r30
    1ed2:	bf 91       	pop	r27
    1ed4:	af 91       	pop	r26
    1ed6:	9f 91       	pop	r25
    1ed8:	8f 91       	pop	r24
    1eda:	7f 91       	pop	r23
    1edc:	6f 91       	pop	r22
    1ede:	5f 91       	pop	r21
    1ee0:	4f 91       	pop	r20
    1ee2:	3f 91       	pop	r19
    1ee4:	2f 91       	pop	r18
    1ee6:	0f 90       	pop	r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <_ZN7Timer16C1EhPFvvES1_S1_S1_>:
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	ec 01       	movw	r28, r24
    1f0c:	96 2e       	mov	r9, r22
    1f0e:	5a 01       	movw	r10, r20
    1f10:	69 01       	movw	r12, r18
    1f12:	83 e8       	ldi	r24, 0x83	; 131
    1f14:	92 e0       	ldi	r25, 0x02	; 2
    1f16:	99 83       	std	Y+1, r25	; 0x01
    1f18:	88 83       	st	Y, r24
    1f1a:	86 2f       	mov	r24, r22
    1f1c:	00 d3       	rcall	.+1536   	; 0x251e <_Z20tc_handle_to_addressh>
    1f1e:	9b 83       	std	Y+3, r25	; 0x03
    1f20:	8a 83       	std	Y+2, r24	; 0x02
    1f22:	e9 2d       	mov	r30, r9
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	e9 54       	subi	r30, 0x49	; 73
    1f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	9d 83       	std	Y+5, r25	; 0x05
    1f36:	8c 83       	std	Y+4, r24	; 0x04
    1f38:	8d ea       	ldi	r24, 0xAD	; 173
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	99 83       	std	Y+1, r25	; 0x01
    1f3e:	88 83       	st	Y, r24
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	98 12       	cpse	r9, r24
    1f44:	26 c0       	rjmp	.+76     	; 0x1f92 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0x9e>
    1f46:	d0 93 e1 1c 	sts	0x1CE1, r29	; 0x801ce1 <timer_obj+0x3>
    1f4a:	c0 93 e0 1c 	sts	0x1CE0, r28	; 0x801ce0 <timer_obj+0x2>
    1f4e:	a1 14       	cp	r10, r1
    1f50:	b1 04       	cpc	r11, r1
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <_ZN7Timer16C1EhPFvvES1_S1_S1_+0x6a>
    1f54:	ef e6       	ldi	r30, 0x6F	; 111
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	80 83       	st	Z, r24
    1f5e:	c1 14       	cp	r12, r1
    1f60:	d1 04       	cpc	r13, r1
    1f62:	29 f0       	breq	.+10     	; 0x1f6e <_ZN7Timer16C1EhPFvvES1_S1_S1_+0x7a>
    1f64:	ef e6       	ldi	r30, 0x6F	; 111
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	84 60       	ori	r24, 0x04	; 4
    1f6c:	80 83       	st	Z, r24
    1f6e:	01 15       	cp	r16, r1
    1f70:	11 05       	cpc	r17, r1
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <_ZN7Timer16C1EhPFvvES1_S1_S1_+0x8a>
    1f74:	ef e6       	ldi	r30, 0x6F	; 111
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 60       	ori	r24, 0x08	; 8
    1f7c:	80 83       	st	Z, r24
    1f7e:	e1 14       	cp	r14, r1
    1f80:	f1 04       	cpc	r15, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0x92>
    1f84:	7e c0       	rjmp	.+252    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    1f86:	ef e6       	ldi	r30, 0x6F	; 111
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	81 60       	ori	r24, 0x01	; 1
    1f8e:	80 83       	st	Z, r24
    1f90:	78 c0       	rjmp	.+240    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	98 12       	cpse	r9, r24
    1f96:	26 c0       	rjmp	.+76     	; 0x1fe4 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0xf0>
    1f98:	d0 93 e5 1c 	sts	0x1CE5, r29	; 0x801ce5 <timer_obj+0x7>
    1f9c:	c0 93 e4 1c 	sts	0x1CE4, r28	; 0x801ce4 <timer_obj+0x6>
    1fa0:	a1 14       	cp	r10, r1
    1fa2:	b1 04       	cpc	r11, r1
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0xbc>
    1fa6:	e1 e7       	ldi	r30, 0x71	; 113
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	82 60       	ori	r24, 0x02	; 2
    1fae:	80 83       	st	Z, r24
    1fb0:	c1 14       	cp	r12, r1
    1fb2:	d1 04       	cpc	r13, r1
    1fb4:	29 f0       	breq	.+10     	; 0x1fc0 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0xcc>
    1fb6:	e1 e7       	ldi	r30, 0x71	; 113
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	84 60       	ori	r24, 0x04	; 4
    1fbe:	80 83       	st	Z, r24
    1fc0:	01 15       	cp	r16, r1
    1fc2:	11 05       	cpc	r17, r1
    1fc4:	29 f0       	breq	.+10     	; 0x1fd0 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0xdc>
    1fc6:	e1 e7       	ldi	r30, 0x71	; 113
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 60       	ori	r24, 0x08	; 8
    1fce:	80 83       	st	Z, r24
    1fd0:	e1 14       	cp	r14, r1
    1fd2:	f1 04       	cpc	r15, r1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <_ZN7Timer16C1EhPFvvES1_S1_S1_+0xe4>
    1fd6:	55 c0       	rjmp	.+170    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    1fd8:	e1 e7       	ldi	r30, 0x71	; 113
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	81 60       	ori	r24, 0x01	; 1
    1fe0:	80 83       	st	Z, r24
    1fe2:	4f c0       	rjmp	.+158    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	98 12       	cpse	r9, r24
    1fe8:	25 c0       	rjmp	.+74     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    1fea:	d0 93 e7 1c 	sts	0x1CE7, r29	; 0x801ce7 <timer_obj+0x9>
    1fee:	c0 93 e6 1c 	sts	0x1CE6, r28	; 0x801ce6 <timer_obj+0x8>
    1ff2:	a1 14       	cp	r10, r1
    1ff4:	b1 04       	cpc	r11, r1
    1ff6:	29 f0       	breq	.+10     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ff8:	e2 e7       	ldi	r30, 0x72	; 114
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	82 60       	ori	r24, 0x02	; 2
    2000:	80 83       	st	Z, r24
    2002:	c1 14       	cp	r12, r1
    2004:	d1 04       	cpc	r13, r1
    2006:	29 f0       	breq	.+10     	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    2008:	e2 e7       	ldi	r30, 0x72	; 114
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	84 60       	ori	r24, 0x04	; 4
    2010:	80 83       	st	Z, r24
    2012:	01 15       	cp	r16, r1
    2014:	11 05       	cpc	r17, r1
    2016:	29 f0       	breq	.+10     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    2018:	e2 e7       	ldi	r30, 0x72	; 114
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	88 60       	ori	r24, 0x08	; 8
    2020:	80 83       	st	Z, r24
    2022:	e1 14       	cp	r14, r1
    2024:	f1 04       	cpc	r15, r1
    2026:	69 f1       	breq	.+90     	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    2028:	e2 e7       	ldi	r30, 0x72	; 114
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	81 60       	ori	r24, 0x01	; 1
    2030:	80 83       	st	Z, r24
    2032:	27 c0       	rjmp	.+78     	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    2034:	85 e0       	ldi	r24, 0x05	; 5
    2036:	98 12       	cpse	r9, r24
    2038:	2e c0       	rjmp	.+92     	; 0x2096 <__DATA_REGION_LENGTH__+0x96>
    203a:	d0 93 e9 1c 	sts	0x1CE9, r29	; 0x801ce9 <timer_obj+0xb>
    203e:	c0 93 e8 1c 	sts	0x1CE8, r28	; 0x801ce8 <timer_obj+0xa>
    2042:	a1 14       	cp	r10, r1
    2044:	b1 04       	cpc	r11, r1
    2046:	29 f0       	breq	.+10     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2048:	e3 e7       	ldi	r30, 0x73	; 115
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	82 60       	ori	r24, 0x02	; 2
    2050:	80 83       	st	Z, r24
    2052:	c1 14       	cp	r12, r1
    2054:	d1 04       	cpc	r13, r1
    2056:	29 f0       	breq	.+10     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2058:	e3 e7       	ldi	r30, 0x73	; 115
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	84 60       	ori	r24, 0x04	; 4
    2060:	80 83       	st	Z, r24
    2062:	01 15       	cp	r16, r1
    2064:	11 05       	cpc	r17, r1
    2066:	29 f0       	breq	.+10     	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2068:	e3 e7       	ldi	r30, 0x73	; 115
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	88 60       	ori	r24, 0x08	; 8
    2070:	80 83       	st	Z, r24
    2072:	e1 14       	cp	r14, r1
    2074:	f1 04       	cpc	r15, r1
    2076:	29 f0       	breq	.+10     	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    2078:	e3 e7       	ldi	r30, 0x73	; 115
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	81 60       	ori	r24, 0x01	; 1
    2080:	80 83       	st	Z, r24
    2082:	b9 86       	std	Y+9, r11	; 0x09
    2084:	a8 86       	std	Y+8, r10	; 0x08
    2086:	db 86       	std	Y+11, r13	; 0x0b
    2088:	ca 86       	std	Y+10, r12	; 0x0a
    208a:	1d 87       	std	Y+13, r17	; 0x0d
    208c:	0c 87       	std	Y+12, r16	; 0x0c
    208e:	ff 86       	std	Y+15, r15	; 0x0f
    2090:	ee 86       	std	Y+14, r14	; 0x0e
    2092:	1e 82       	std	Y+6, r1	; 0x06
    2094:	1f 82       	std	Y+7, r1	; 0x07
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	08 95       	ret

000020ae <_ZN7Timer168start_msEjjjjh>:
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	fc 01       	movw	r30, r24
    20bc:	ff b6       	in	r15, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	a4 81       	ldd	r26, Z+4	; 0x04
    20c2:	b5 81       	ldd	r27, Z+5	; 0x05
    20c4:	8c 91       	ld	r24, X
    20c6:	88 7f       	andi	r24, 0xF8	; 248
    20c8:	8c 93       	st	X, r24
    20ca:	a4 81       	ldd	r26, Z+4	; 0x04
    20cc:	b5 81       	ldd	r27, Z+5	; 0x05
    20ce:	8c 91       	ld	r24, X
    20d0:	85 60       	ori	r24, 0x05	; 5
    20d2:	8c 93       	st	X, r24
    20d4:	a6 2f       	mov	r26, r22
    20d6:	b7 2f       	mov	r27, r23
    20d8:	a2 31       	cpi	r26, 0x12	; 18
    20da:	81 e1       	ldi	r24, 0x11	; 17
    20dc:	b8 07       	cpc	r27, r24
    20de:	10 f0       	brcs	.+4      	; 0x20e4 <_ZN7Timer168start_msEjjjjh+0x36>
    20e0:	a1 e1       	ldi	r26, 0x11	; 17
    20e2:	b1 e1       	ldi	r27, 0x11	; 17
    20e4:	8f e0       	ldi	r24, 0x0F	; 15
    20e6:	8a 9f       	mul	r24, r26
    20e8:	e0 01       	movw	r28, r0
    20ea:	8b 9f       	mul	r24, r27
    20ec:	d0 0d       	add	r29, r0
    20ee:	11 24       	eor	r1, r1
    20f0:	64 2f       	mov	r22, r20
    20f2:	75 2f       	mov	r23, r21
    20f4:	62 31       	cpi	r22, 0x12	; 18
    20f6:	81 e1       	ldi	r24, 0x11	; 17
    20f8:	78 07       	cpc	r23, r24
    20fa:	10 f0       	brcs	.+4      	; 0x2100 <_ZN7Timer168start_msEjjjjh+0x52>
    20fc:	61 e1       	ldi	r22, 0x11	; 17
    20fe:	71 e1       	ldi	r23, 0x11	; 17
    2100:	8f e0       	ldi	r24, 0x0F	; 15
    2102:	86 9f       	mul	r24, r22
    2104:	d0 01       	movw	r26, r0
    2106:	87 9f       	mul	r24, r23
    2108:	b0 0d       	add	r27, r0
    210a:	11 24       	eor	r1, r1
    210c:	42 2f       	mov	r20, r18
    210e:	53 2f       	mov	r21, r19
    2110:	42 31       	cpi	r20, 0x12	; 18
    2112:	81 e1       	ldi	r24, 0x11	; 17
    2114:	58 07       	cpc	r21, r24
    2116:	10 f0       	brcs	.+4      	; 0x211c <_ZN7Timer168start_msEjjjjh+0x6e>
    2118:	41 e1       	ldi	r20, 0x11	; 17
    211a:	51 e1       	ldi	r21, 0x11	; 17
    211c:	8f e0       	ldi	r24, 0x0F	; 15
    211e:	84 9f       	mul	r24, r20
    2120:	b0 01       	movw	r22, r0
    2122:	85 9f       	mul	r24, r21
    2124:	70 0d       	add	r23, r0
    2126:	11 24       	eor	r1, r1
    2128:	20 2f       	mov	r18, r16
    212a:	31 2f       	mov	r19, r17
    212c:	22 31       	cpi	r18, 0x12	; 18
    212e:	81 e1       	ldi	r24, 0x11	; 17
    2130:	38 07       	cpc	r19, r24
    2132:	10 f0       	brcs	.+4      	; 0x2138 <_ZN7Timer168start_msEjjjjh+0x8a>
    2134:	21 e1       	ldi	r18, 0x11	; 17
    2136:	31 e1       	ldi	r19, 0x11	; 17
    2138:	8f e0       	ldi	r24, 0x0F	; 15
    213a:	82 9f       	mul	r24, r18
    213c:	a0 01       	movw	r20, r0
    213e:	83 9f       	mul	r24, r19
    2140:	50 0d       	add	r21, r0
    2142:	11 24       	eor	r1, r1
    2144:	51 8b       	std	Z+17, r21	; 0x11
    2146:	40 8b       	std	Z+16, r20	; 0x10
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <tc_vect+0x2>
    2150:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <tc_vect+0x3>
    2154:	82 17       	cp	r24, r18
    2156:	93 07       	cpc	r25, r19
    2158:	89 f4       	brne	.+34     	; 0x217c <_ZN7Timer168start_msEjjjjh+0xce>
    215a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    215e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    2162:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    2166:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    216a:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    216e:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
    2172:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    2176:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    217a:	40 c0       	rjmp	.+128    	; 0x21fc <_ZN7Timer168start_msEjjjjh+0x14e>
    217c:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <tc_vect+0x6>
    2180:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <tc_vect+0x7>
    2184:	82 17       	cp	r24, r18
    2186:	93 07       	cpc	r25, r19
    2188:	89 f4       	brne	.+34     	; 0x21ac <_ZN7Timer168start_msEjjjjh+0xfe>
    218a:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    218e:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    2192:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    2196:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    219a:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    219e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
    21a2:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    21a6:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    21aa:	28 c0       	rjmp	.+80     	; 0x21fc <_ZN7Timer168start_msEjjjjh+0x14e>
    21ac:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <tc_vect+0x8>
    21b0:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <tc_vect+0x9>
    21b4:	82 17       	cp	r24, r18
    21b6:	93 07       	cpc	r25, r19
    21b8:	89 f4       	brne	.+34     	; 0x21dc <_ZN7Timer168start_msEjjjjh+0x12e>
    21ba:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    21be:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    21c2:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    21c6:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    21ca:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    21ce:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
    21d2:	50 93 a5 00 	sts	0x00A5, r21	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
    21d6:	40 93 a4 00 	sts	0x00A4, r20	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
    21da:	10 c0       	rjmp	.+32     	; 0x21fc <_ZN7Timer168start_msEjjjjh+0x14e>
    21dc:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    21e0:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    21e4:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    21e8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    21ec:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    21f0:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
    21f4:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    21f8:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    21fc:	e6 82       	std	Z+6, r14	; 0x06
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	87 83       	std	Z+7, r24	; 0x07
    2202:	ff be       	out	0x3f, r15	; 63
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	08 95       	ret

00002212 <_ZN6Timer8C1EhPFvvES1_S1_>:
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	ec 01       	movw	r28, r24
    2226:	b6 2e       	mov	r11, r22
    2228:	6a 01       	movw	r12, r20
    222a:	79 01       	movw	r14, r18
    222c:	83 e8       	ldi	r24, 0x83	; 131
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	99 83       	std	Y+1, r25	; 0x01
    2232:	88 83       	st	Y, r24
    2234:	86 2f       	mov	r24, r22
    2236:	73 d1       	rcall	.+742    	; 0x251e <_Z20tc_handle_to_addressh>
    2238:	9b 83       	std	Y+3, r25	; 0x03
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	eb 2d       	mov	r30, r11
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	e9 54       	subi	r30, 0x49	; 73
    2246:	fd 4f       	sbci	r31, 0xFD	; 253
    2248:	80 81       	ld	r24, Z
    224a:	91 81       	ldd	r25, Z+1	; 0x01
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	9d 83       	std	Y+5, r25	; 0x05
    2250:	8c 83       	std	Y+4, r24	; 0x04
    2252:	81 e9       	ldi	r24, 0x91	; 145
    2254:	92 e0       	ldi	r25, 0x02	; 2
    2256:	99 83       	std	Y+1, r25	; 0x01
    2258:	88 83       	st	Y, r24
    225a:	b1 10       	cpse	r11, r1
    225c:	1d c0       	rjmp	.+58     	; 0x2298 <_ZN6Timer8C1EhPFvvES1_S1_+0x86>
    225e:	d0 93 df 1c 	sts	0x1CDF, r29	; 0x801cdf <timer_obj+0x1>
    2262:	c0 93 de 1c 	sts	0x1CDE, r28	; 0x801cde <timer_obj>
    2266:	c1 14       	cp	r12, r1
    2268:	d1 04       	cpc	r13, r1
    226a:	29 f0       	breq	.+10     	; 0x2276 <_ZN6Timer8C1EhPFvvES1_S1_+0x64>
    226c:	ee e6       	ldi	r30, 0x6E	; 110
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	80 83       	st	Z, r24
    2276:	e1 14       	cp	r14, r1
    2278:	f1 04       	cpc	r15, r1
    227a:	29 f0       	breq	.+10     	; 0x2286 <_ZN6Timer8C1EhPFvvES1_S1_+0x74>
    227c:	ee e6       	ldi	r30, 0x6E	; 110
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	84 60       	ori	r24, 0x04	; 4
    2284:	80 83       	st	Z, r24
    2286:	01 15       	cp	r16, r1
    2288:	11 05       	cpc	r17, r1
    228a:	29 f1       	breq	.+74     	; 0x22d6 <_ZN6Timer8C1EhPFvvES1_S1_+0xc4>
    228c:	ee e6       	ldi	r30, 0x6E	; 110
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
    2296:	1f c0       	rjmp	.+62     	; 0x22d6 <_ZN6Timer8C1EhPFvvES1_S1_+0xc4>
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	b8 12       	cpse	r11, r24
    229c:	26 c0       	rjmp	.+76     	; 0x22ea <_ZN6Timer8C1EhPFvvES1_S1_+0xd8>
    229e:	d0 93 e3 1c 	sts	0x1CE3, r29	; 0x801ce3 <timer_obj+0x5>
    22a2:	c0 93 e2 1c 	sts	0x1CE2, r28	; 0x801ce2 <timer_obj+0x4>
    22a6:	c1 14       	cp	r12, r1
    22a8:	d1 04       	cpc	r13, r1
    22aa:	29 f0       	breq	.+10     	; 0x22b6 <_ZN6Timer8C1EhPFvvES1_S1_+0xa4>
    22ac:	e0 e7       	ldi	r30, 0x70	; 112
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	82 60       	ori	r24, 0x02	; 2
    22b4:	80 83       	st	Z, r24
    22b6:	e1 14       	cp	r14, r1
    22b8:	f1 04       	cpc	r15, r1
    22ba:	29 f0       	breq	.+10     	; 0x22c6 <_ZN6Timer8C1EhPFvvES1_S1_+0xb4>
    22bc:	e0 e7       	ldi	r30, 0x70	; 112
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	84 60       	ori	r24, 0x04	; 4
    22c4:	80 83       	st	Z, r24
    22c6:	01 15       	cp	r16, r1
    22c8:	11 05       	cpc	r17, r1
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <_ZN6Timer8C1EhPFvvES1_S1_+0xc4>
    22cc:	e0 e7       	ldi	r30, 0x70	; 112
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	81 60       	ori	r24, 0x01	; 1
    22d4:	80 83       	st	Z, r24
    22d6:	d9 86       	std	Y+9, r13	; 0x09
    22d8:	c8 86       	std	Y+8, r12	; 0x08
    22da:	fb 86       	std	Y+11, r15	; 0x0b
    22dc:	ea 86       	std	Y+10, r14	; 0x0a
    22de:	1d 86       	std	Y+13, r1	; 0x0d
    22e0:	1c 86       	std	Y+12, r1	; 0x0c
    22e2:	1f 87       	std	Y+15, r17	; 0x0f
    22e4:	0e 87       	std	Y+14, r16	; 0x0e
    22e6:	1e 82       	std	Y+6, r1	; 0x06
    22e8:	1f 82       	std	Y+7, r1	; 0x07
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	08 95       	ret

000022fe <_ZN7OSTimerC1Eh>:
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	7c 01       	movw	r14, r24
    230a:	c6 2f       	mov	r28, r22
    230c:	00 e0       	ldi	r16, 0x00	; 0
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	7c df       	rcall	.-264    	; 0x2212 <_ZN6Timer8C1EhPFvvES1_S1_>
    231a:	8f e9       	ldi	r24, 0x9F	; 159
    231c:	92 e0       	ldi	r25, 0x02	; 2
    231e:	f7 01       	movw	r30, r14
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
    2324:	c1 11       	cpse	r28, r1
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <_ZN7OSTimerC1Eh+0x32>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    232e:	05 c0       	rjmp	.+10     	; 0x233a <_ZN7OSTimerC1Eh+0x3c>
    2330:	c2 30       	cpi	r28, 0x02	; 2
    2332:	19 f4       	brne	.+6      	; 0x233a <_ZN7OSTimerC1Eh+0x3c>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	08 95       	ret

00002346 <_ZN7OSTimer13force_timeoutEv>:
    2346:	dc 01       	movw	r26, r24
    2348:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    234a:	f8 94       	cli
    234c:	83 b7       	in	r24, 0x33	; 51
    234e:	81 7f       	andi	r24, 0xF1	; 241
    2350:	83 bf       	out	0x33, r24	; 51
    2352:	12 96       	adiw	r26, 0x02	; 2
    2354:	4d 91       	ld	r20, X+
    2356:	5c 91       	ld	r21, X
    2358:	13 97       	sbiw	r26, 0x03	; 3
    235a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tc_vect>
    235e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <tc_vect+0x1>
    2362:	48 17       	cp	r20, r24
    2364:	59 07       	cpc	r21, r25
    2366:	21 f4       	brne	.+8      	; 0x2370 <_ZN7OSTimer13force_timeoutEv+0x2a>
    2368:	86 b5       	in	r24, 0x26	; 38
    236a:	9f ef       	ldi	r25, 0xFF	; 255
    236c:	96 bd       	out	0x26, r25	; 38
    236e:	05 c0       	rjmp	.+10     	; 0x237a <_ZN7OSTimer13force_timeoutEv+0x34>
    2370:	e2 eb       	ldi	r30, 0xB2	; 178
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	9f ef       	ldi	r25, 0xFF	; 255
    2378:	90 83       	st	Z, r25
    237a:	14 96       	adiw	r26, 0x04	; 4
    237c:	ed 91       	ld	r30, X+
    237e:	fc 91       	ld	r31, X
    2380:	15 97       	sbiw	r26, 0x05	; 5
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2386:	2f bf       	out	0x3f, r18	; 63
    2388:	93 b7       	in	r25, 0x33	; 51
    238a:	91 60       	ori	r25, 0x01	; 1
    238c:	93 bf       	out	0x33, r25	; 51
    238e:	88 95       	sleep
    2390:	93 b7       	in	r25, 0x33	; 51
    2392:	9e 7f       	andi	r25, 0xFE	; 254
    2394:	93 bf       	out	0x33, r25	; 51
    2396:	50 96       	adiw	r26, 0x10	; 16
    2398:	9c 91       	ld	r25, X
    239a:	89 1b       	sub	r24, r25
    239c:	08 95       	ret

0000239e <_ZN7OSTimer5startEj>:
    239e:	fc 01       	movw	r30, r24
    23a0:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23a2:	f8 94       	cli
    23a4:	a4 81       	ldd	r26, Z+4	; 0x04
    23a6:	b5 81       	ldd	r27, Z+5	; 0x05
    23a8:	8c 91       	ld	r24, X
    23aa:	88 7f       	andi	r24, 0xF8	; 248
    23ac:	8c 93       	st	X, r24
    23ae:	86 2f       	mov	r24, r22
    23b0:	97 2f       	mov	r25, r23
    23b2:	82 31       	cpi	r24, 0x12	; 18
    23b4:	91 05       	cpc	r25, r1
    23b6:	10 f0       	brcs	.+4      	; 0x23bc <_ZN7OSTimer5startEj+0x1e>
    23b8:	81 e1       	ldi	r24, 0x11	; 17
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	98 2f       	mov	r25, r24
    23be:	99 0f       	add	r25, r25
    23c0:	89 0f       	add	r24, r25
    23c2:	98 2f       	mov	r25, r24
    23c4:	99 0f       	add	r25, r25
    23c6:	99 0f       	add	r25, r25
    23c8:	89 0f       	add	r24, r25
    23ca:	80 95       	com	r24
    23cc:	80 8b       	std	Z+16, r24	; 0x10
    23ce:	22 81       	ldd	r18, Z+2	; 0x02
    23d0:	33 81       	ldd	r19, Z+3	; 0x03
    23d2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tc_vect>
    23d6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <tc_vect+0x1>
    23da:	28 17       	cp	r18, r24
    23dc:	39 07       	cpc	r19, r25
    23de:	41 f4       	brne	.+16     	; 0x23f0 <_ZN7OSTimer5startEj+0x52>
    23e0:	a4 81       	ldd	r26, Z+4	; 0x04
    23e2:	b5 81       	ldd	r27, Z+5	; 0x05
    23e4:	8c 91       	ld	r24, X
    23e6:	85 60       	ori	r24, 0x05	; 5
    23e8:	8c 93       	st	X, r24
    23ea:	80 89       	ldd	r24, Z+16	; 0x10
    23ec:	86 bd       	out	0x26, r24	; 38
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <_ZN7OSTimer5startEj+0x62>
    23f0:	a4 81       	ldd	r26, Z+4	; 0x04
    23f2:	b5 81       	ldd	r27, Z+5	; 0x05
    23f4:	8c 91       	ld	r24, X
    23f6:	87 60       	ori	r24, 0x07	; 7
    23f8:	8c 93       	st	X, r24
    23fa:	80 89       	ldd	r24, Z+16	; 0x10
    23fc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	86 83       	std	Z+6, r24	; 0x06
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	87 83       	std	Z+7, r24	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2408:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    240a:	08 95       	ret

0000240c <_ZN5Timer4stopEv>:
    240c:	fc 01       	movw	r30, r24
    240e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2410:	f8 94       	cli
    2412:	a4 81       	ldd	r26, Z+4	; 0x04
    2414:	b5 81       	ldd	r27, Z+5	; 0x05
    2416:	8c 91       	ld	r24, X
    2418:	88 7f       	andi	r24, 0xF8	; 248
    241a:	8c 93       	st	X, r24
    241c:	16 82       	std	Z+6, r1	; 0x06
    241e:	17 82       	std	Z+7, r1	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2420:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2422:	08 95       	ret

00002424 <_ZN7Timer165resetEv>:
    2424:	fc 01       	movw	r30, r24
    2426:	86 81       	ldd	r24, Z+6	; 0x06
    2428:	82 30       	cpi	r24, 0x02	; 2
    242a:	b8 f1       	brcs	.+110    	; 0x249a <_ZN7Timer165resetEv+0x76>
    242c:	8f 3f       	cpi	r24, 0xFF	; 255
    242e:	11 f0       	breq	.+4      	; 0x2434 <_ZN7Timer165resetEv+0x10>
    2430:	81 50       	subi	r24, 0x01	; 1
    2432:	86 83       	std	Z+6, r24	; 0x06
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <tc_vect+0x2>
    243c:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <tc_vect+0x3>
    2440:	82 17       	cp	r24, r18
    2442:	93 07       	cpc	r25, r19
    2444:	39 f4       	brne	.+14     	; 0x2454 <_ZN7Timer165resetEv+0x30>
    2446:	80 89       	ldd	r24, Z+16	; 0x10
    2448:	91 89       	ldd	r25, Z+17	; 0x11
    244a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    244e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    2452:	08 95       	ret
    2454:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <tc_vect+0x6>
    2458:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <tc_vect+0x7>
    245c:	82 17       	cp	r24, r18
    245e:	93 07       	cpc	r25, r19
    2460:	39 f4       	brne	.+14     	; 0x2470 <_ZN7Timer165resetEv+0x4c>
    2462:	80 89       	ldd	r24, Z+16	; 0x10
    2464:	91 89       	ldd	r25, Z+17	; 0x11
    2466:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    246a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    246e:	08 95       	ret
    2470:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <tc_vect+0x8>
    2474:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <tc_vect+0x9>
    2478:	82 17       	cp	r24, r18
    247a:	93 07       	cpc	r25, r19
    247c:	39 f4       	brne	.+14     	; 0x248c <_ZN7Timer165resetEv+0x68>
    247e:	80 89       	ldd	r24, Z+16	; 0x10
    2480:	91 89       	ldd	r25, Z+17	; 0x11
    2482:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
    2486:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
    248a:	08 95       	ret
    248c:	80 89       	ldd	r24, Z+16	; 0x10
    248e:	91 89       	ldd	r25, Z+17	; 0x11
    2490:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    2494:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    2498:	08 95       	ret
    249a:	cf 01       	movw	r24, r30
    249c:	b7 cf       	rjmp	.-146    	; 0x240c <_ZN5Timer4stopEv>
    249e:	08 95       	ret

000024a0 <_ZN6Timer85resetEv>:
    24a0:	fc 01       	movw	r30, r24
    24a2:	86 81       	ldd	r24, Z+6	; 0x06
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	a0 f0       	brcs	.+40     	; 0x24d0 <_ZN6Timer85resetEv+0x30>
    24a8:	8f 3f       	cpi	r24, 0xFF	; 255
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <_ZN6Timer85resetEv+0x10>
    24ac:	81 50       	subi	r24, 0x01	; 1
    24ae:	86 83       	std	Z+6, r24	; 0x06
    24b0:	22 81       	ldd	r18, Z+2	; 0x02
    24b2:	33 81       	ldd	r19, Z+3	; 0x03
    24b4:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tc_vect>
    24b8:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <tc_vect+0x1>
    24bc:	28 17       	cp	r18, r24
    24be:	39 07       	cpc	r19, r25
    24c0:	19 f4       	brne	.+6      	; 0x24c8 <_ZN6Timer85resetEv+0x28>
    24c2:	80 89       	ldd	r24, Z+16	; 0x10
    24c4:	86 bd       	out	0x26, r24	; 38
    24c6:	08 95       	ret
    24c8:	80 89       	ldd	r24, Z+16	; 0x10
    24ca:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    24ce:	08 95       	ret
    24d0:	cf 01       	movw	r24, r30
    24d2:	9c cf       	rjmp	.-200    	; 0x240c <_ZN5Timer4stopEv>
    24d4:	08 95       	ret

000024d6 <_Z22port_handle_to_addressh>:
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	ba 01       	movw	r22, r20
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <_Z22port_handle_to_addressh+0x10>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <_Z22port_handle_to_addressh+0xc>
    24ea:	cb 01       	movw	r24, r22
    24ec:	40 91 eb 1c 	lds	r20, 0x1CEB	; 0x801ceb <_ZL10port_usage>
    24f0:	50 91 ec 1c 	lds	r21, 0x1CEC	; 0x801cec <_ZL10port_usage+0x1>
    24f4:	64 23       	and	r22, r20
    24f6:	75 23       	and	r23, r21
    24f8:	67 2b       	or	r22, r23
    24fa:	71 f4       	brne	.+28     	; 0x2518 <_Z22port_handle_to_addressh+0x42>
    24fc:	84 2b       	or	r24, r20
    24fe:	95 2b       	or	r25, r21
    2500:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <_ZL10port_usage+0x1>
    2504:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <_ZL10port_usage>
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	f9 01       	movw	r30, r18
    250e:	ed 53       	subi	r30, 0x3D	; 61
    2510:	fd 4f       	sbci	r31, 0xFD	; 253
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	08 95       	ret
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	08 95       	ret

0000251e <_Z20tc_handle_to_addressh>:
    251e:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <_ZL8tc_usage>
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	46 2f       	mov	r20, r22
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	08 2e       	mov	r0, r24
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <_Z20tc_handle_to_addressh+0x14>
    252e:	55 95       	asr	r21
    2530:	47 95       	ror	r20
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <_Z20tc_handle_to_addressh+0x10>
    2536:	40 fd       	sbrc	r20, 0
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <_Z20tc_handle_to_addressh+0x44>
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	fa 01       	movw	r30, r20
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <_Z20tc_handle_to_addressh+0x28>
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	8a 95       	dec	r24
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <_Z20tc_handle_to_addressh+0x24>
    254a:	cf 01       	movw	r24, r30
    254c:	86 2b       	or	r24, r22
    254e:	80 93 ea 1c 	sts	0x1CEA, r24	; 0x801cea <_ZL8tc_usage>
    2552:	22 0f       	add	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	f9 01       	movw	r30, r18
    2558:	e9 54       	subi	r30, 0x49	; 73
    255a:	fd 4f       	sbci	r31, 0xFD	; 253
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	08 95       	ret
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	08 95       	ret

00002568 <__tablejump2__>:
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	88 1f       	adc	r24, r24
    256e:	8b bf       	out	0x3b, r24	; 59
    2570:	07 90       	elpm	r0, Z+
    2572:	f6 91       	elpm	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	19 94       	eijmp

00002578 <_exit>:
    2578:	f8 94       	cli

0000257a <__stop_program>:
    257a:	ff cf       	rjmp	.-2      	; 0x257a <__stop_program>
